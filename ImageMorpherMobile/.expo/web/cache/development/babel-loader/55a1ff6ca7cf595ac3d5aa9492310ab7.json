{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React, { Fragment, useState } from 'react'\n// import { View, Text, Image, StyleSheet, TouchableOpacity, ActivityIndicator } from 'react-native'\n// import { Button } from 'react-native-paper'\n// import * as WebBrowser from 'expo-web-browser'\n// import * as Analytics from 'expo-firebase-analytics'\n\n// import { morph_endpoint } from '../../constants/index'\n\n// export function MorphSequenceButton ({\n//   firstImageRef,\n//   secondImageRef,\n// }) {\n//   const [isLoading, setIsLoading] = useState(false)\n//   const [isSuccess, setIsSuccess] = useState(false)\n//   const [isFailure, setIsFailure] = useState(false)\n//   const [morphSequenceResponse, setMorphSequenceResponse] = useState(null)\n\n//   function setInitialMorphState () {\n//     setIsLoading(false)\n//     setIsSuccess(false)\n//     setIsFailure(false)\n//     setMorphSequenceResponse(null)\n//   }\n\n//   function getMorphedSequence () {\n//     Analytics.logEvent('ButtonTapped', {\n//       name: 'GetMorphSequence',\n//       screen: 'main',\n//       purpose: 'Begin the morph sequence'\n//     })\n//     WebBrowser.openBrowserAsync(morphSequenceResponse.toString())\n//   }\n\n//   async function getMorphSequence (firstImageRef, secondImageRef) {\n//     if (!firstImageRef || !secondImageRef) {\n//       return\n//     }\n\n//     try {\n//       await Analytics.logEvent('ButtonTapped', {\n//         name: 'StartMorphSequence',\n//         screen: 'main',\n//         purpose: 'Start the morph sequence'\n//       })\n\n//       const data = new FormData()\n//       data.append('firstImageRef', firstImageRef)\n//       data.append('secondImageRef', secondImageRef)\n//       data.append('isSequence', 'True')\n//       data.append('stepSize', '20')\n//       // Correct\n//       setIsLoading(true)\n//       setIsSuccess(false)\n//       setIsFailure(false)\n//       setMorphSequenceResponse(null)\n\n//       const response = await\n//       fetch(\n//         morph_endpoint, {\n//           method: 'POST',\n//           headers: {\n//             Authorization: 'ImageMorpherV1'\n//           },\n//           body: data\n//         }\n//       )\n//         .then(res => {\n//           try {\n//             if (res.ok) {\n//               return res.json()\n//             } else {\n//               throw new Error(res)\n//             }\n//           } catch (err) {\n//             console.log(err.message)\n//             setIsLoading(false)\n//             setIsSuccess(false)\n//             setIsFailure(true)\n//             setMorphSequenceResponse(null)\n//             throw err\n//           }\n//         })\n//         .then(resJson => {\n//           // On success, hide the loading spinner\n//           setIsLoading(false)\n//           setIsSuccess(true)\n//           setIsFailure(false)\n//           setMorphSequenceResponse(resJson)\n\n//           Analytics.logEvent('ButtonTapped', {\n//             name: 'MorphSequenceSuccess',\n//             screen: 'main',\n//             purpose: 'Morph was successful'\n//           })\n\n//           return resJson.data\n//         })\n//         .catch((error) => {\n//           console.error(error)\n//           Analytics.logEvent('ButtonTapped', {\n//             name: 'MorphSequenceFailure',\n//             screen: 'main',\n//             purpose: error.message\n//           })\n//         })\n//     } catch (error) {\n//       console.error(error)\n//     }\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <View style={styles.morphArea}>\n//         <View style={styles.morphBtn}>\n//           <Text style={styles.morphTxt}>\n//             Morphing sequence..\n//             <ActivityIndicator size=\"small\"/>\n//           </Text>\n//         </View>\n//       </View>\n//     )\n//   }\n\n//   if (isSuccess && morphSequenceResponse) {\n//     getMorphedSequence()\n//     return (\n//       <Fragment>\n//         <View style={styles.morphArea}>\n//             <Button mode=\"outlined\" onPress={() => getMorphedSequence()}>\n//               <View style={styles.morphBtn}>\n//                 <Text style={styles.morphTxt}>\n//                   View Morph Gif\n//                 </Text>\n//               </View>\n//             </Button>\n//         </View>\n//       </Fragment>\n//     )\n//   }\n\n//   if (isFailure) {\n//     return (\n//       <View style={styles.morphArea}>\n//         <TouchableOpacity onPress={() => setInitialMorphState()} style={styles.morphBtn}>\n//           <Text style={styles.morphTxt}>Morph Sequence Failed\n//           <View style={{ paddingLeft: 5 }}>\n//           <Image source={require('../../assets/redo-arrow.png')} style={styles.smallReset}></Image>\n//           </View>\n//           </Text>\n//         </TouchableOpacity>\n//     </View>\n//     )\n//   }\n\n//   if (!morphSequenceResponse) {\n//     return (\n//       <Button onPress={() => getMorphSequence(firstImageRef, secondImageRef)} mode='outlined'>\n//         <Text>Generate morph sequence!</Text>\n//       </Button>\n//     )\n//   }\n\n//   return (null)\n// }\n\n// const styles = StyleSheet.create({\n//   morphArea: {\n//     bottom: 0,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     flex: 1\n//   },\n//   morphBtn: {\n//     borderRadius: 10,\n//     borderWidth: 2,\n//     backgroundColor: '#fbfbfb',\n//     width: 300,\n//     height: 50,\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   },\n//   morphTxt: {\n//     fontFamily: 'System',\n//     fontSize: 18,\n//     color: '#2b2b2b',\n//     fontWeight: 'bold'\n//   }\n// })\n"]},"metadata":{},"sourceType":"script"}