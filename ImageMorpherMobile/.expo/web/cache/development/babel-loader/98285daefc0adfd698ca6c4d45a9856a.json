{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/App.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { Title } from \"./src/components/Title\";\nimport { UploadImagesView } from \"./src/components/views/UploadImagesView\";\nimport { MorphResponseView } from \"./src/components/views/MorphResponseView\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Button } from 'react-native-paper';\nimport { white } from 'react-native-paper/lib/typescript/styles/colors';\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstImageRef = _useState2[0],\n      setFirstImageRef = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secondImageRef = _useState4[0],\n      setSecondImageRef = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      morphResponse = _useState6[0],\n      setMorphResponse = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isGif = _useState8[0],\n      setIsGif = _useState8[1];\n\n  var getView = function getView() {\n    if (morphResponse) {\n      return React.createElement(MorphResponseView, {\n        firstImageRef: firstImageRef,\n        secondImageRef: secondImageRef,\n        morphResponse: morphResponse,\n        setFirstImageRef: setFirstImageRef,\n        setSecondImageRef: setSecondImageRef,\n        setMorphResponse: setMorphResponse,\n        isGif: isGif,\n        setIsGif: setIsGif,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return React.createElement(UploadImagesView, {\n      firstImageRef: firstImageRef,\n      secondImageRef: secondImageRef,\n      morphResponse: morphResponse,\n      setFirstImageRef: setFirstImageRef,\n      setSecondImageRef: setSecondImageRef,\n      setMorphResponse: setMorphResponse,\n      isGif: isGif,\n      setIsGif: setIsGif,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return React.createElement(PaperProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, React.createElement(LinearGradient, {\n    colors: ['#000428', '#004e92'],\n    style: styles.background,\n    start: [0, 0],\n    end: [1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.tabs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    mode: \"outlined\",\n    style: styles.tab,\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"GIF\"), React.createElement(Button, {\n    mode: \"outlined\",\n    style: styles.tab,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Image\")), React.createElement(View, {\n    style: styles.view,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, getView())));\n}\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  tabs: {\n    flexDirection: 'row'\n  },\n  tab: {\n    width: '50vw',\n    height: 60,\n    color: 'white'\n  },\n  view: {\n    marginTop: '20vh',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/App.js"],"names":["React","useState","Provider","PaperProvider","Title","UploadImagesView","MorphResponseView","LinearGradient","Button","white","App","firstImageRef","setFirstImageRef","secondImageRef","setSecondImageRef","morphResponse","setMorphResponse","isGif","setIsGif","getView","styles","background","tabs","tab","view","StyleSheet","create","flex","alignItems","flexDirection","width","height","color","marginTop","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\n// UI library - React Native Paper\nimport { Provider as PaperProvider } from 'react-native-paper'\nimport { Title } from './src/components/Title'\nimport { UploadImagesView }from './src/components/views/UploadImagesView'\nimport { MorphResponseView } from './src/components/views/MorphResponseView'\nimport { LinearGradient } from 'expo-linear-gradient'\nimport { Button } from 'react-native-paper'\nimport { white } from 'react-native-paper/lib/typescript/styles/colors'\n\nexport default function App () {\n\n  const [firstImageRef, setFirstImageRef] = useState(null)\n  const [secondImageRef, setSecondImageRef] = useState(null)\n  const [morphResponse, setMorphResponse] = useState(null)\n  const [isGif, setIsGif] = useState(false)\n\n  const getView = () => {\n    if (morphResponse) {\n      return (\n        <MorphResponseView\n          firstImageRef={firstImageRef}\n          secondImageRef={secondImageRef}\n          morphResponse={morphResponse}\n    \n          setFirstImageRef={setFirstImageRef}\n          setSecondImageRef={setSecondImageRef}\n          setMorphResponse={setMorphResponse}\n\n          isGif={isGif}\n          setIsGif={setIsGif}\n      />\n      )\n    }\n    return (\n      <UploadImagesView\n        firstImageRef={firstImageRef}\n        secondImageRef={secondImageRef}\n        morphResponse={morphResponse}\n  \n        setFirstImageRef={setFirstImageRef}\n        setSecondImageRef={setSecondImageRef}\n        setMorphResponse={setMorphResponse}\n\n        isGif={isGif}\n        setIsGif={setIsGif}\n      />\n    )\n  }\n\n  return (\n    <PaperProvider>\n      <LinearGradient\n        colors={['#000428', '#004e92']}\n        style={styles.background}\n        start={[0, 0]}\n        end={[1, 1]}\n      >\n        <View style={styles.tabs}>\n          <Button \n            mode='outlined'\n            style={styles.tab}\n            color='white'\n          >\n            GIF\n          </Button>\n          <Button \n            mode=\"outlined\"\n            style={styles.tab}\n          >\n            Image\n          </Button>\n        </View>\n        <View style={styles.view}>\n          {getView()}\n        </View>\n      </LinearGradient>\n    </PaperProvider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabs: {\n    flexDirection: 'row',\n  },\n  tab: {\n    width: '50vw',\n    height: 60,\n    color: 'white',\n  },\n  view: {\n    marginTop: '20vh',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}