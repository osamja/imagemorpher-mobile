{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/ViewMorphedImage.js\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { MorphImageButton } from \"./MorphImageButton\";\nimport { MorphSequenceButton } from \"./MorphSequenceButton\";\nimport { ImageUploadButton } from \"./ImageUploadButton\";\nexport default function ViewMorphedImage() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstImageRef = _useState2[0],\n      setFirstImageRef = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secondImageRef = _useState4[0],\n      setSecondImageRef = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      morphImageResponse = _useState6[0],\n      setMorphImageResponse = _useState6[1];\n\n  function resetMorphState() {\n    setFirstImageRef(null);\n    setSecondImageRef(null);\n    setMorphImageResponse(null);\n  }\n\n  return React.createElement(LinearGradient, {\n    colors: ['#c2e9fb', '#a1c4fd'],\n    style: styles.background,\n    start: [0, 0],\n    end: [1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, React.createElement(MorphImageButton, {\n    firstImageRef: firstImageRef,\n    secondImageRef: secondImageRef,\n    morphImageResponse: morphImageResponse,\n    setFirstImageRef: setFirstImageRef,\n    setSecondImageRef: setSecondImageRef,\n    setMorphImageResponse: setMorphImageResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, React.createElement(MorphSequenceButton, {\n    firstImageRef: firstImageRef,\n    secondImageRef: secondImageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return resetMorphState();\n    },\n    style: styles.morphArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"./../../assets/redo-arrow.png\"),\n    style: styles.reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1\n  },\n  morphArea: {\n    bottom: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  title: {\n    marginTop: 30,\n    fontSize: 40,\n    textAlign: 'center',\n    color: '#2b2b2b',\n    fontWeight: 'bold',\n    fontFamily: 'Roboto'\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column'\n  },\n  reset: {\n    width: 40,\n    height: 40,\n    margin: 25\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/ViewMorphedImage.js"],"names":["React","useState","LinearGradient","MorphImageButton","MorphSequenceButton","ImageUploadButton","ViewMorphedImage","firstImageRef","setFirstImageRef","secondImageRef","setSecondImageRef","morphImageResponse","setMorphImageResponse","resetMorphState","styles","background","container","morphArea","require","reset","StyleSheet","create","flex","bottom","justifyContent","alignItems","title","marginTop","fontSize","textAlign","color","fontWeight","fontFamily","flexDirection","width","height","margin"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity, Image } from 'react-native'\nimport { LinearGradient } from 'expo-linear-gradient'\nimport { MorphImageButton } from './MorphImageButton'\nimport { MorphSequenceButton } from './MorphSequenceButton'\nimport { ImageUploadButton } from './ImageUploadButton'\n\nexport default function ViewMorphedImage() {\n\n  const [firstImageRef, setFirstImageRef] = useState(null)\n  const [secondImageRef, setSecondImageRef] = useState(null)\n  const [morphImageResponse, setMorphImageResponse] = useState(null)\n\n  function resetMorphState () {\n    setFirstImageRef(null)\n    setSecondImageRef(null)\n    setMorphImageResponse(null)\n  }\n\nreturn (\n    <LinearGradient\n    // Background Linear Gradient\n    colors={['#c2e9fb', '#a1c4fd']}\n    style={styles.background}\n    start={[0, 0]}\n    end={[1, 1]}\n    >\n    <View style={styles.container}>\n        <MorphImageButton\n        firstImageRef={firstImageRef}\n        secondImageRef={secondImageRef}\n        morphImageResponse={morphImageResponse}\n\n        setFirstImageRef={setFirstImageRef}\n        setSecondImageRef={setSecondImageRef}\n        setMorphImageResponse={setMorphImageResponse}\n        />\n    </View>\n    <View style={styles.container}>\n        <MorphSequenceButton\n        firstImageRef={firstImageRef}\n        secondImageRef={secondImageRef}\n        />\n    </View>\n    <View>\n        <TouchableOpacity onPress={() => resetMorphState()} style={styles.morphArea}>\n            <Image source={require('./../../assets/redo-arrow.png')} style={styles.reset}></Image>\n        </TouchableOpacity>\n    </View>\n</LinearGradient>\n)\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1\n  },\n  morphArea: {\n    bottom: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  title: {\n    marginTop: 30,\n    fontSize: 40,\n    textAlign: 'center',\n    color: '#2b2b2b',\n    fontWeight: 'bold',\n    fontFamily: 'Roboto'\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n  },\n  reset: {\n    width: 40,\n    height: 40,\n    margin: 25\n  }\n})\n"]},"metadata":{},"sourceType":"module"}