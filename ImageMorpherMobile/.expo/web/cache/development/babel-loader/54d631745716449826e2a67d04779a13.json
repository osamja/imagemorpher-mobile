{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/MorphButton.jsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Button } from 'react-native-paper';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Analytics from 'expo-firebase-analytics';\nimport { morph_endpoint } from \"../constants/index\";\nexport function MorphButton(_ref) {\n  var isGif = _ref.isGif,\n      firstImageRef = _ref.firstImageRef,\n      secondImageRef = _ref.secondImageRef,\n      setFirstImageRef = _ref.setFirstImageRef,\n      setSecondImageRef = _ref.setSecondImageRef,\n      morphResponse = _ref.morphResponse,\n      setMorphResponse = _ref.setMorphResponse;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSuccess = _useState4[0],\n      setIsSuccess = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFailure = _useState6[0],\n      setIsFailure = _useState6[1];\n\n  function setInitialMorphState() {\n    setFirstImageRef(null);\n    setSecondImageRef(null);\n    setMorphResponse(null);\n    setIsLoading(false);\n    setIsSuccess(false);\n    setIsFailure(false);\n    setMorphResponse(null);\n  }\n\n  function getMorphResponse() {\n    Analytics.logEvent('ButtonTapped', {\n      name: isGif ? 'GetMorphSequence' : 'GetMorph',\n      screen: 'main',\n      purpose: 'Begin the morph'\n    });\n    WebBrowser.openBrowserAsync(morphResponse.toString());\n  }\n\n  function getMorph(firstImageRef, secondImageRef) {\n    var data, response;\n    return _regeneratorRuntime.async(function getMorph$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!firstImageRef || !secondImageRef)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Analytics.logEvent('ButtonTapped', {\n              name: isGif ? 'StartMorphSequence' : 'StartMorph',\n              screen: 'main',\n              purpose: isGif ? 'Start the morph sequence' : 'Start the morph'\n            }));\n\n          case 5:\n            data = new FormData();\n            data.append('firstImageRef', firstImageRef);\n            data.append('secondImageRef', secondImageRef);\n            data.append('isSequence', isGif);\n            data.append('stepSize', '20');\n            setIsLoading(true);\n            setIsSuccess(false);\n            setIsFailure(false);\n            setMorphResponse(null);\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(fetch(morph_endpoint, {\n              method: 'POST',\n              headers: {\n                Authorization: 'ImageMorpherV1'\n              },\n              body: data\n            }).then(function (res) {\n              try {\n                if (res.ok) {\n                  return res.json();\n                } else {\n                  throw new Error(res);\n                }\n              } catch (err) {\n                console.log(err.message);\n                setIsLoading(false);\n                setIsSuccess(false);\n                setIsFailure(true);\n                setMorphImageResponse(null);\n                throw err;\n              }\n            }).then(function (resJson) {\n              setIsLoading(false);\n              setIsSuccess(true);\n              setIsFailure(false);\n              setMorphImageResponse(resJson);\n              Analytics.logEvent('ButtonTapped', {\n                name: isGif ? 'MorphSequenceSuccess' : 'MorphSuccess',\n                screen: 'main',\n                purpose: 'Morph was successful'\n              });\n              return resJson.data;\n            }).catch(function (error) {\n              console.error(error);\n              Analytics.logEvent('ButtonTapped', {\n                name: isGif ? 'MorphSequenceFailure' : 'MorphFailure',\n                screen: 'main',\n                purpose: error.message\n              });\n            }));\n\n          case 16:\n            response = _context.sent;\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(_context.t0);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 19]], Promise);\n  }\n\n  if (isLoading) {\n    return React.createElement(Button, {\n      mode: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), \"Morphing\");\n  }\n\n  if (morphResponse) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, React.createElement(Button, {\n      mode: \"outlined\",\n      onPress: function onPress() {\n        return getMorphedImg();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, \"View \", isGif ? 'GIF' : 'Image'));\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      return getMorph(firstImageRef, secondImageRef);\n    },\n    mode: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, \"Morph\"));\n}\nvar styles = StyleSheet.create({\n  morphArea: {\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  morphBtn: {\n    borderRadius: 10,\n    borderWidth: 2,\n    backgroundColor: '#fbfbfb',\n    width: 300,\n    height: 50,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  morphTxt: {\n    fontFamily: 'System',\n    fontSize: 18,\n    color: '#2b2b2b',\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/MorphButton.jsx"],"names":["React","useState","Button","WebBrowser","Analytics","morph_endpoint","MorphButton","isGif","firstImageRef","secondImageRef","setFirstImageRef","setSecondImageRef","morphResponse","setMorphResponse","isLoading","setIsLoading","isSuccess","setIsSuccess","isFailure","setIsFailure","setInitialMorphState","getMorphResponse","logEvent","name","screen","purpose","openBrowserAsync","toString","getMorph","data","FormData","append","fetch","method","headers","Authorization","body","then","res","ok","json","Error","err","console","log","message","setMorphImageResponse","resJson","catch","error","response","getMorphedImg","styles","StyleSheet","create","morphArea","bottom","justifyContent","alignItems","flex","morphBtn","borderRadius","borderWidth","backgroundColor","width","height","morphTxt","fontFamily","fontSize","color","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { View, StyleSheet, ActivityIndicator } from 'react-native'\nimport { Button } from 'react-native-paper';\nimport * as WebBrowser from 'expo-web-browser'\nimport * as Analytics from 'expo-firebase-analytics'\n\nimport { morph_endpoint } from '../constants/index'\n\nexport function MorphButton({\n  isGif,\n  firstImageRef,\n  secondImageRef,\n  setFirstImageRef,\n  setSecondImageRef,\n  morphResponse,\n  setMorphResponse\n}) {\n    \n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [isFailure, setIsFailure] = useState(false)\n\n  function setInitialMorphState () {\n    setFirstImageRef(null)\n    setSecondImageRef(null)\n    setMorphResponse(null)\n    setIsLoading(false)\n    setIsSuccess(false)\n    setIsFailure(false)\n    setMorphResponse(null)\n  }\n\n  function getMorphResponse() {\n    Analytics.logEvent('ButtonTapped', {\n        name: (isGif ? 'GetMorphSequence' : 'GetMorph'),\n        screen: 'main',\n        purpose: 'Begin the morph'\n      })\n      WebBrowser.openBrowserAsync(morphResponse.toString())\n  }\n\n  async function getMorph (firstImageRef, secondImageRef) {\n    if (!firstImageRef || !secondImageRef) {\n      return\n    }\n   \n    try {\n      await Analytics.logEvent('ButtonTapped', {\n        name: (isGif ? 'StartMorphSequence' : 'StartMorph'),\n        screen: 'main',\n        purpose: (isGif ? 'Start the morph sequence' : 'Start the morph'),\n      })\n\n      const data = new FormData()\n      data.append('firstImageRef', firstImageRef)\n      data.append('secondImageRef', secondImageRef)\n      data.append('isSequence', isGif)\n      data.append('stepSize', '20')\n      // Correct\n      setIsLoading(true)\n      setIsSuccess(false)\n      setIsFailure(false)\n      setMorphResponse(null)\n\n      const response = await\n      fetch(\n        morph_endpoint, {\n          method: 'POST',\n          headers: {\n            Authorization: 'ImageMorpherV1'\n          },\n          body: data\n        }\n      )\n        .then(res => {\n          try {\n            if (res.ok) {\n              return res.json()\n            } else {\n              throw new Error(res)\n            }\n          } catch (err) {\n            console.log(err.message)\n            setIsLoading(false)\n            setIsSuccess(false)\n            setIsFailure(true)\n            setMorphImageResponse(null)\n            throw err\n          }\n        })\n        .then(resJson => {\n          // On success, hide the loading spinner\n          setIsLoading(false)\n          setIsSuccess(true)\n          setIsFailure(false)\n          setMorphImageResponse(resJson)\n\n          Analytics.logEvent('ButtonTapped', {\n            name: (isGif ? 'MorphSequenceSuccess' : 'MorphSuccess'),\n            screen: 'main',\n            purpose: 'Morph was successful'\n          })\n\n          return resJson.data\n        })\n        .catch((error) => {\n          console.error(error)\n          Analytics.logEvent('ButtonTapped', {\n            name: (isGif ? 'MorphSequenceFailure' : 'MorphFailure'),\n            screen: 'main',\n            purpose: error.message\n          })\n        })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <Button mode=\"outlined\">\n        <ActivityIndicator size=\"small\" />\n        Morphing \n      </Button>\n    )\n  }\n\n  if (morphResponse) {\n    return (\n      <View>\n        <Button mode=\"outlined\" onPress={() => getMorphedImg()}>\n          View {isGif ? 'GIF' : 'Image'}\n        </Button>\n      </View>\n    )\n  }\n\n  return (\n    <View>\n      <Button onPress={() => getMorph(firstImageRef, secondImageRef)} mode=\"outlined\"> \n        Morph\n      </Button>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  morphArea: {\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  morphBtn: {\n    borderRadius: 10,\n    borderWidth: 2,\n    backgroundColor: '#fbfbfb',\n    width: 300,\n    height: 50,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  morphTxt: {\n    fontFamily: 'System',\n    fontSize: 18,\n    color: '#2b2b2b',\n    fontWeight: 'bold'\n  }\n})\n"]},"metadata":{},"sourceType":"module"}