{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/App.js\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { Title } from \"./src/components/Title\";\nimport { UploadImagesView } from \"./src/components/UploadImagesView\";\nimport { MorphResponseView } from \"./src/components/MorphResponseView\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts } from 'expo-font';\nexport default function App() {\n  var _this = this;\n\n  var _useFonts = useFonts({\n    Roboto: require(\"./assets/fonts/Roboto_Slab/RobotoSlab-VariableFont_wght.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstImageRef = _useState2[0],\n      setFirstImageRef = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secondImageRef = _useState4[0],\n      setSecondImageRef = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      morphImageResponse = _useState6[0],\n      setMorphImageResponse = _useState6[1];\n\n  function setInitialMorphState() {\n    setFirstImageRef(null);\n    setSecondImageRef(null);\n    setMorphImageResponse(null);\n  }\n\n  var getView = function getView() {\n    if (morphImageResponse) {\n      return React.createElement(MorphResponseView, {\n        firstImageRef: firstImageRef,\n        secondImageRef: secondImageRef,\n        morphImageResponse: morphImageResponse,\n        setFirstImageRef: setFirstImageRef,\n        setSecondImageRef: setSecondImageRef,\n        setMorphImageResponse: setMorphImageResponse,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return React.createElement(UploadImagesView, {\n      firstImageRef: firstImageRef,\n      secondImageRef: secondImageRef,\n      morphImageResponse: morphImageResponse,\n      setFirstImageRef: setFirstImageRef,\n      setSecondImageRef: setSecondImageRef,\n      setMorphImageResponse: setMorphImageResponse,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return React.createElement(PaperProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, React.createElement(LinearGradient, {\n    colors: ['#000428', '#004e92'],\n    style: styles.background,\n    start: [0, 0],\n    end: [1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.view,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, getView())));\n}\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  view: {\n    marginTop: '20vh',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/App.js"],"names":["React","useState","Provider","PaperProvider","Title","UploadImagesView","MorphResponseView","LinearGradient","useFonts","App","Roboto","require","loaded","firstImageRef","setFirstImageRef","secondImageRef","setSecondImageRef","morphImageResponse","setMorphImageResponse","setInitialMorphState","getView","styles","background","view","StyleSheet","create","flex","alignItems","marginTop","flexDirection","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAIA,SAASC,QAAQ,IAAIC,aAArB,QAA0C,oBAA1C;AAEA,SAASC,KAAT;AACA,SAASC,gBAAT;AACA,SAASC,iBAAT;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,eAAe,SAASC,GAAT,GAAgB;AAAA;;AAAA,kBAEZD,QAAQ,CAAC;AACxBE,IAAAA,MAAM,EAAEC,OAAO;AADS,GAAD,CAFI;AAAA;AAAA,MAEtBC,MAFsB;;AAAA,kBAMaX,QAAQ,CAAC,IAAD,CANrB;AAAA;AAAA,MAMtBY,aANsB;AAAA,MAMPC,gBANO;;AAAA,mBAOeb,QAAQ,CAAC,IAAD,CAPvB;AAAA;AAAA,MAOtBc,cAPsB;AAAA,MAONC,iBAPM;;AAAA,mBAQuBf,QAAQ,CAAC,IAAD,CAR/B;AAAA;AAAA,MAQtBgB,kBARsB;AAAA,MAQFC,qBARE;;AAU7B,WAASC,oBAAT,GAAgC;AAC5BL,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAE,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH;;AAED,MAAME,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,QAAIH,kBAAJ,EAAwB;AACtB,aACE,oBAAC,iBAAD;AACE,QAAA,aAAa,EAAEJ,aADjB;AAEE,QAAA,cAAc,EAAEE,cAFlB;AAGE,QAAA,kBAAkB,EAAEE,kBAHtB;AAKE,QAAA,gBAAgB,EAAEH,gBALpB;AAME,QAAA,iBAAiB,EAAEE,iBANrB;AAOE,QAAA,qBAAqB,EAAEE,qBAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD;;AACD,WACE,oBAAC,gBAAD;AACE,MAAA,aAAa,EAAEL,aADjB;AAEE,MAAA,cAAc,EAAEE,cAFlB;AAGE,MAAA,kBAAkB,EAAEE,kBAHtB;AAKE,MAAA,gBAAgB,EAAEH,gBALpB;AAME,MAAA,iBAAiB,EAAEE,iBANrB;AAOE,MAAA,qBAAqB,EAAEE,qBAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAzBD;;AA2BA,SACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,CADV;AAEE,IAAA,KAAK,EAAEG,MAAM,CAACC,UAFhB;AAGE,IAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAHT;AAIE,IAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,CAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,OAAO,EADV,CANF,CADF,CADF;AAcD;AAED,IAAMC,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,UAAU,EAAE;AACVI,IAAAA,IAAI,EAAE,CADI;AAEVC,IAAAA,UAAU,EAAE;AAFF,GADmB;AAK/BJ,EAAAA,IAAI,EAAE;AACJK,IAAAA,SAAS,EAAE,MADP;AAEJC,IAAAA,aAAa,EAAE,QAFX;AAGJC,IAAAA,cAAc,EAAE;AAHZ;AALyB,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Text, View, StyleSheet } from 'react-native'\n\n// UI library - React Native Paper\nimport { Provider as PaperProvider } from 'react-native-paper'\n\nimport { Title } from './src/components/Title'\nimport { UploadImagesView }from './src/components/UploadImagesView'\nimport { MorphResponseView } from './src/components/MorphResponseView'\n\nimport { LinearGradient } from 'expo-linear-gradient'\nimport { useFonts } from 'expo-font'\n\nexport default function App () {\n\n  const [loaded] = useFonts({\n    Roboto: require('./assets/fonts/Roboto_Slab/RobotoSlab-VariableFont_wght.ttf')\n  })\n\n  const [firstImageRef, setFirstImageRef] = useState(null)\n  const [secondImageRef, setSecondImageRef] = useState(null)\n  const [morphImageResponse, setMorphImageResponse] = useState(null)\n\n  function setInitialMorphState() {\n      setFirstImageRef(null)\n      setSecondImageRef(null)\n      setMorphImageResponse(null)\n  }\n\n  const getView = () => {\n    if (morphImageResponse) {\n      return (\n        <MorphResponseView\n          firstImageRef={firstImageRef}\n          secondImageRef={secondImageRef}\n          morphImageResponse={morphImageResponse}\n    \n          setFirstImageRef={setFirstImageRef}\n          setSecondImageRef={setSecondImageRef}\n          setMorphImageResponse={setMorphImageResponse}\n      />\n      )\n    }\n    return (\n      <UploadImagesView\n        firstImageRef={firstImageRef}\n        secondImageRef={secondImageRef}\n        morphImageResponse={morphImageResponse}\n  \n        setFirstImageRef={setFirstImageRef}\n        setSecondImageRef={setSecondImageRef}\n        setMorphImageResponse={setMorphImageResponse}\n      />\n    )\n  }\n\n  return (\n    <PaperProvider>\n      <LinearGradient\n        colors={['#000428', '#004e92']}\n        style={styles.background}\n        start={[0, 0]}\n        end={[1, 1]}\n      >\n        <View style={styles.view}>\n          {getView()}\n        </View>\n      </LinearGradient>\n    </PaperProvider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  view: {\n    marginTop: '20vh',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}