{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/ImageUploadButton.jsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Analytics from 'expo-firebase-analytics';\nimport { Button } from 'react-native-paper';\nimport { morph_upload_endpoint } from \"../constants/index\";\nexport function ImageUploadButton(_ref) {\n  var imageRef = _ref.imageRef,\n      setImageRef = _ref.setImageRef;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSuccess = _useState4[0],\n      setIsSuccess = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFailure = _useState6[0],\n      setIsFailure = _useState6[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Analytics.logEvent('ButtonTapped', {\n              name: 'PickImage',\n              screen: 'main',\n              purpose: 'Image upload button'\n            }));\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 0.1,\n              base64: true\n            }));\n\n          case 4:\n            result = _context.sent;\n\n            if (!result.cancelled) {\n              if (imageRef === null || imageRef instanceof Error) {\n                if (result.base64) {\n                  uploadImage(result.base64);\n                } else {\n                  uploadImage(result.uri);\n                }\n              }\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uploadImage = function uploadImage(img) {\n    var data;\n    return _regeneratorRuntime.async(function uploadImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            data = new FormData();\n            data.append('firstImageRef', img);\n            setIsLoading(true);\n            setIsSuccess(false);\n            setIsFailure(false);\n            fetch(morph_upload_endpoint, {\n              method: 'POST',\n              headers: {\n                Authorization: 'ImageMorpherV1'\n              },\n              body: data\n            }).then(function (res) {\n              if (!res.ok) {\n                throw res;\n              }\n\n              return res.json();\n            }).then(function (resJson) {\n              Analytics.logEvent('ButtonTapped', {\n                name: 'UploadSuccess',\n                screen: 'main',\n                purpose: 'Image upload was successful'\n              });\n              setIsLoading(false);\n              setIsSuccess(true);\n              setIsFailure(false);\n              setImageRef(resJson);\n              return resJson.data;\n            }).catch(function (errorResponse) {\n              errorResponse.json().then(function (errorMessage) {\n                Analytics.logEvent('ButtonTapped', {\n                  name: 'UploadFailure',\n                  screen: 'main',\n                  purpose: 'Image upload failed'\n                });\n                console.log(errorMessage);\n                setIsLoading(false);\n                setIsSuccess(false);\n                setIsFailure(true);\n                var errorObject = new Error(errorMessage);\n                setImageRef(errorObject);\n              });\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uploadBtn = React.createElement(Image, {\n    source: require(\"../../assets/avatar.png\"),\n    style: styles.uploadBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  });\n  var uploadFailureButton = React.createElement(Image, {\n    source: require(\"../../assets/error-avatar.png\"),\n    style: styles.uploadBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 31\n    }\n  });\n  var isUploadedBtn = React.createElement(Image, {\n    source: require(\"../../assets/avatar-green.png\"),\n    style: styles.uploadBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  });\n  var redoButton = React.createElement(Image, {\n    source: require(\"../../assets/redo-arrow.png\"),\n    style: styles.largeReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 22\n    }\n  });\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.uploadArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, React.createElement(Button, {\n      icon: \"face-recognition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, React.createElement(View, {\n      style: styles.uploadImgArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n  if (isSuccess && imageRef) {\n    return React.createElement(View, {\n      style: styles.uploadArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, React.createElement(Button, {\n      icon: \"face-recognition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, React.createElement(View, {\n      style: styles.uploadImgArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, isUploadedBtn)));\n  }\n\n  if (isFailure) {\n    return React.createElement(View, {\n      style: styles.uploadArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: pickImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, React.createElement(View, {\n      style: styles.failedUploadImgArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, imageRef && imageRef.message), imageRef && redoButton)));\n  }\n\n  return React.createElement(Button, {\n    icon: \"face-recognition\",\n    style: styles.uploadImgBtn,\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  });\n  return React.createElement(View, {\n    style: styles.uploadArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    icon: \"face-recognition\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.uploadImgArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, !imageRef && uploadBtn, imageRef && isUploadedBtn)));\n}\nvar styles = StyleSheet.create({\n  uploadArea: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 30\n  },\n  uploadImgArea: {\n    alignItems: 'center',\n    width: 125,\n    height: 125,\n    backgroundColor: '#fbfbfb',\n    borderRadius: 20\n  },\n  uploadBtn: {\n    width: '90%',\n    height: '100%',\n    resizeMode: 'contain'\n  },\n  failMessage: {\n    color: 'white',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  failedUploadImgArea: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 125,\n    height: 125,\n    backgroundColor: 'red',\n    borderRadius: 20,\n    color: 'white'\n  },\n  checkMark: {\n    width: 30,\n    height: 30,\n    marginLeft: 20\n  },\n  largeReset: {\n    width: 40,\n    height: 40\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/ImageUploadButton.jsx"],"names":["React","useState","ImagePicker","Analytics","Button","morph_upload_endpoint","ImageUploadButton","imageRef","setImageRef","isLoading","setIsLoading","isSuccess","setIsSuccess","isFailure","setIsFailure","pickImage","logEvent","name","screen","purpose","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","base64","result","cancelled","Error","uploadImage","uri","img","data","FormData","append","fetch","method","headers","Authorization","body","then","res","ok","json","resJson","catch","errorResponse","errorMessage","console","log","errorObject","uploadBtn","require","styles","uploadFailureButton","isUploadedBtn","redoButton","largeReset","uploadArea","uploadImgArea","failedUploadImgArea","message","uploadImgBtn","StyleSheet","create","justifyContent","alignItems","padding","width","height","backgroundColor","borderRadius","resizeMode","failMessage","color","checkMark","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { View, Text, Image, StyleSheet, TouchableOpacity, ActivityIndicator } from 'react-native'\nimport * as ImagePicker from 'expo-image-picker'\nimport * as Analytics from 'expo-firebase-analytics'\nimport { Button } from 'react-native-paper';\n\nimport { morph_upload_endpoint } from '../constants/index'\n\nexport function ImageUploadButton ({\n  imageRef,\n  setImageRef\n}) {\n  \n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [isFailure, setIsFailure] = useState(false)\n\n  const pickImage = async () => {\n    await Analytics.logEvent('ButtonTapped', {\n      name: 'PickImage',\n      screen: 'main',\n      purpose: 'Image upload button'\n    })\n\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [4, 3],\n      // Quality of compression: [0, 1]\n      quality: 0.1,\n      base64: true\n    })\n\n    if (!result.cancelled) {\n      if (imageRef === null || (imageRef instanceof Error)) {\n        // image picker on iphone works different than web browser\n        if (result.base64) {\n          uploadImage(result.base64)\n        } \n        else {\n          uploadImage(result.uri)\n        }\n      }\n    }\n  }\n\n  const uploadImage = async (img) => {\n    const data = new FormData()\n    data.append('firstImageRef', img)\n\n    setIsLoading(true)\n    setIsSuccess(false)\n    setIsFailure(false)\n\n    fetch(\n      morph_upload_endpoint, {\n        method: 'POST',\n        headers: {\n          Authorization: 'ImageMorpherV1'\n        },\n        body: data\n      }\n    )\n      .then(res => {\n        if (!res.ok) {\n          throw res\n        }\n\n        return res.json()\n      })\n      .then(resJson => {\n        Analytics.logEvent('ButtonTapped', {\n          name: 'UploadSuccess',\n          screen: 'main',\n          purpose: 'Image upload was successful'\n        })\n        // On success, hide the loading spinner\n        setIsLoading(false)\n        setIsSuccess(true)\n        setIsFailure(false)\n        setImageRef(resJson)\n        return resJson.data\n      })\n      .catch((errorResponse) => {\n        errorResponse.json().then(errorMessage => {\n          Analytics.logEvent('ButtonTapped', {\n            name: 'UploadFailure',\n            screen: 'main',\n            purpose: 'Image upload failed'\n          })\n          console.log(errorMessage)\n          setIsLoading(false)\n          setIsSuccess(false)\n          setIsFailure(true)\n          const errorObject = new Error(errorMessage)\n          setImageRef(errorObject)\n        })\n      })\n  }\n\n  const uploadBtn = <Image source={require('../../assets/avatar.png')} style={styles.uploadBtn} />\n  const uploadFailureButton = <Image source={require('../../assets/error-avatar.png')} style={styles.uploadBtn} />\n  const isUploadedBtn = <Image source={require('../../assets/avatar-green.png')} style={styles.uploadBtn} />\n  const redoButton = <Image source={require('../../assets/redo-arrow.png')} style={styles.largeReset}></Image>\n\n  if (isLoading) {\n    return (\n      <View style={styles.uploadArea} >\n        <Button icon=\"face-recognition\">\n          <View style={styles.uploadImgArea}>\n            <ActivityIndicator size=\"small\"/>\n          </View>\n        </Button>\n      </View>\n    )\n  }\n\n  if (isSuccess && imageRef) {\n    return (\n      <View style={styles.uploadArea} >\n        <Button icon=\"face-recognition\">\n          <View style={styles.uploadImgArea}>\n            {isUploadedBtn}\n          </View>\n        </Button>\n      </View>\n    )\n  }\n\n  if (isFailure) {\n    return (\n      <View style={styles.uploadArea} >\n        <TouchableOpacity onPress={pickImage}>\n          <View style={styles.failedUploadImgArea}>\n            <Text>{imageRef && imageRef.message}</Text>\n            {imageRef && redoButton}\n            {/* {uploadFailureButton} */}\n          </View>\n        </TouchableOpacity>\n      </View>\n    )\n  }\n\n  return (\n    <Button icon=\"face-recognition\" style={styles.uploadImgBtn} onPress={pickImage}>\n\n    </Button>\n    )\n\n  return (\n    <View style={styles.uploadArea} >\n      <Button icon=\"face-recognition\" onPress={pickImage}>\n          <View style={styles.uploadImgArea}>\n            {!imageRef && uploadBtn}\n            {imageRef && isUploadedBtn}\n          </View>\n        </Button>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  uploadArea: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 30,\n  },\n  uploadImgArea: {\n    alignItems: 'center',\n    width: 125,\n    height: 125,\n    backgroundColor: '#fbfbfb',\n    borderRadius: 20\n  },\n  uploadBtn: {\n    width: '90%',\n    height: '100%',\n    resizeMode: 'contain'\n  },\n  failMessage: {\n    color: 'white',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  failedUploadImgArea: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 125,\n    height: 125,\n    backgroundColor: 'red',\n    borderRadius: 20,\n    color: 'white'\n  },\n  checkMark: {\n    width: 30,\n    height: 30,\n    marginLeft: 20\n  },\n  largeReset: {\n    width: 40,\n    height: 40\n  }\n})\n"]},"metadata":{},"sourceType":"module"}