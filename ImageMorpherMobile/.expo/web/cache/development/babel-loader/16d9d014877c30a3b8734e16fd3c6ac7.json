{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/MorphImageButton.jsx\";\nimport React, { Fragment, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Button } from 'react-native-paper';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Analytics from 'expo-firebase-analytics';\nimport { morph_endpoint } from \"../constants/index\";\nexport function MorphImageButton(_ref) {\n  var firstImageRef = _ref.firstImageRef,\n      secondImageRef = _ref.secondImageRef,\n      morphImageResponse = _ref.morphImageResponse,\n      setFirstImageRef = _ref.setFirstImageRef,\n      setSecondImageRef = _ref.setSecondImageRef,\n      setMorphImageResponse = _ref.setMorphImageResponse;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSuccess = _useState4[0],\n      setIsSuccess = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFailure = _useState6[0],\n      setIsFailure = _useState6[1];\n\n  function setInitialMorphState() {\n    setFirstImageRef(null);\n    setSecondImageRef(null);\n    setMorphImageResponse(null);\n    setIsLoading(false);\n    setIsSuccess(false);\n    setIsFailure(false);\n  }\n\n  function getMorph(firstImageRef, secondImageRef) {\n    var data, response;\n    return _regeneratorRuntime.async(function getMorph$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!firstImageRef || !secondImageRef)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Analytics.logEvent('ButtonTapped', {\n              name: 'StartMorph',\n              screen: 'main',\n              purpose: 'Start the morph'\n            }));\n\n          case 5:\n            data = new FormData();\n            data.append('firstImageRef', firstImageRef);\n            data.append('secondImageRef', secondImageRef);\n            data.append('isSequence', 'False');\n            data.append('stepSize', '20');\n            setIsLoading(true);\n            setIsSuccess(false);\n            setIsFailure(false);\n            setMorphImageResponse(null);\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(fetch(morph_endpoint, {\n              method: 'POST',\n              headers: {\n                Authorization: 'ImageMorpherV1'\n              },\n              body: data\n            }).then(function (res) {\n              try {\n                if (res.ok) {\n                  return res.json();\n                } else {\n                  throw new Error(res);\n                }\n              } catch (err) {\n                console.log(err.message);\n                setIsLoading(false);\n                setIsSuccess(false);\n                setIsFailure(true);\n                setMorphImageResponse(null);\n                throw err;\n              }\n            }).then(function (resJson) {\n              setIsLoading(false);\n              setIsSuccess(true);\n              setIsFailure(false);\n              setMorphImageResponse(resJson);\n              Analytics.logEvent('ButtonTapped', {\n                name: 'MorphSuccess',\n                screen: 'main',\n                purpose: 'Morph was successful'\n              });\n              return resJson.data;\n            }).catch(function (error) {\n              console.error(error);\n              Analytics.logEvent('ButtonTapped', {\n                name: 'MorphFailure',\n                screen: 'main',\n                purpose: error.message\n              });\n            }));\n\n          case 16:\n            response = _context.sent;\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(_context.t0);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 19]], Promise);\n  }\n\n  function getMorphedImg() {\n    Analytics.logEvent('ButtonTapped', {\n      name: 'GetMorph',\n      screen: 'main',\n      purpose: 'Begin the morph'\n    });\n    WebBrowser.openBrowserAsync(morphImageResponse.toString());\n    getMessage();\n  }\n\n  var _useState7 = useState('Please upload two images to morph'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      userMessage = _useState8[0],\n      setUserMessage = _useState8[1];\n\n  var _useState9 = useState('Morph'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      morphBtnText = _useState10[0],\n      setMorphBtnText = _useState10[1];\n\n  var getMessage = function getMessage() {\n    if (isLoading) {\n      setUserMessage('Morphing Images');\n    }\n\n    if (morphImageResponse) {\n      setUserMessage('');\n    }\n\n    if (isFailure) {\n      setUserMessage('Morph Failed. Please try again.');\n    }\n\n    if (!firstImageRef && !secondImageRef) {\n      setUserMessage('Upload two faces to morph');\n    }\n\n    if (!firstImageRef && secondImageRef) {\n      setUserMessage('Upload the first image');\n    }\n\n    if (firstImageRef && !secondImageRef) {\n      setUserMessage('Upload the second image');\n    }\n\n    if (firstImageRef instanceof Error) {\n      setUserMessage('First image is invalid. Please upload again.');\n    }\n\n    if (secondImageRef instanceof Error) {\n      setUserMessage('Second image is invalid. Please upload again.');\n    }\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      return getMorphedImg();\n    },\n    mode: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, morphBtnText)), React.createElement(Text, {\n    style: styles.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, userMessage));\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.morphArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: styles.morphBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.morphTxt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, \"Morphing Images\", React.createElement(ActivityIndicator, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n  if (morphImageResponse) {\n    getMorphedImg();\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, React.createElement(Button, {\n      onPress: function onPress() {\n        return getMorphedImg();\n      },\n      mode: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, \"Open Image\")));\n  }\n\n  if (isFailure) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.morphTxt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, \"Morph Failed\"), React.createElement(Button, {\n      onPress: function onPress() {\n        return setInitialMorphState();\n      },\n      mode: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, \"Reset\"));\n  }\n\n  if (!firstImageRef && !secondImageRef) {\n    return React.createElement(Button, {\n      mode: \"contained\",\n      dark: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, \"Upload two faces to morph\");\n  }\n\n  if (firstImageRef instanceof Error) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.morphTxt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }, \"Re-Upload first image\"), React.createElement(Button, {\n      onPress: function onPress() {\n        return getMorphedImg();\n      },\n      mode: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }, \"Morph\"));\n  }\n\n  if (secondImageRef instanceof Error) {\n    return React.createElement(View, {\n      style: styles.morphArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: styles.morphBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.morphTxt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, \"Re-Upload second image\")));\n  }\n\n  if (firstImageRef && !secondImageRef) {\n    return React.createElement(View, {\n      style: styles.morphArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: styles.morphBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.morphTxt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }, \"Upload the second face\")));\n  }\n\n  if (!firstImageRef && secondImageRef) {\n    return React.createElement(View, {\n      style: styles.morphArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: styles.morphBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.morphTxt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, \"Upload the first face\")));\n  }\n\n  if (!morphImageResponse) {\n    return React.createElement(View, {\n      style: styles.morphArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: styles.morphBtn,\n      onPress: function onPress() {\n        return getMorph(firstImageRef, secondImageRef);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.morphTxt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, \"Let's morph\")));\n  }\n\n  return null;\n}\nvar styles = StyleSheet.create({\n  morphArea: {\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  morphBtn: {\n    borderRadius: 10,\n    borderWidth: 2,\n    backgroundColor: '#fbfbfb',\n    width: 300,\n    height: 50,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  morphTxt: {\n    fontFamily: 'System',\n    fontSize: 18,\n    color: '#2b2b2b',\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/MorphImageButton.jsx"],"names":["React","Fragment","useState","Button","WebBrowser","Analytics","morph_endpoint","MorphImageButton","firstImageRef","secondImageRef","morphImageResponse","setFirstImageRef","setSecondImageRef","setMorphImageResponse","isLoading","setIsLoading","isSuccess","setIsSuccess","isFailure","setIsFailure","setInitialMorphState","getMorph","logEvent","name","screen","purpose","data","FormData","append","fetch","method","headers","Authorization","body","then","res","ok","json","Error","err","console","log","message","resJson","catch","error","response","getMorphedImg","openBrowserAsync","toString","getMessage","userMessage","setUserMessage","morphBtnText","setMorphBtnText","styles","morphArea","morphBtn","morphTxt","StyleSheet","create","bottom","justifyContent","alignItems","flex","borderRadius","borderWidth","backgroundColor","width","height","fontFamily","fontSize","color","fontWeight"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport { View, Text, Image, StyleSheet, TouchableOpacity, ActivityIndicator } from 'react-native'\nimport { Button } from 'react-native-paper';\nimport * as WebBrowser from 'expo-web-browser'\nimport * as Analytics from 'expo-firebase-analytics'\n\nimport { morph_endpoint } from '../constants/index'\n\nexport function MorphImageButton ({\n  firstImageRef,\n  secondImageRef,\n  morphImageResponse,\n  setFirstImageRef,\n  setSecondImageRef,\n  setMorphImageResponse\n}) {\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [isFailure, setIsFailure] = useState(false)\n\n  function setInitialMorphState () {\n    setFirstImageRef(null)\n    setSecondImageRef(null)\n    setMorphImageResponse(null)\n    setIsLoading(false)\n    setIsSuccess(false)\n    setIsFailure(false)\n  }\n\n\n\n  async function getMorph (firstImageRef, secondImageRef) {\n    if (!firstImageRef || !secondImageRef) {\n      return\n    }\n\n    try {\n      await Analytics.logEvent('ButtonTapped', {\n        name: 'StartMorph',\n        screen: 'main',\n        purpose: 'Start the morph'\n      })\n\n      const data = new FormData()\n      data.append('firstImageRef', firstImageRef)\n      data.append('secondImageRef', secondImageRef)\n      data.append('isSequence', 'False')\n      data.append('stepSize', '20')\n      // Correct\n      setIsLoading(true)\n      setIsSuccess(false)\n      setIsFailure(false)\n      setMorphImageResponse(null)\n\n      const response = await\n      fetch(\n        morph_endpoint, {\n          method: 'POST',\n          headers: {\n            Authorization: 'ImageMorpherV1'\n          },\n          body: data\n        }\n      )\n        .then(res => {\n          try {\n            if (res.ok) {\n              return res.json()\n            } else {\n              throw new Error(res)\n            }\n          } catch (err) {\n            console.log(err.message)\n            setIsLoading(false)\n            setIsSuccess(false)\n            setIsFailure(true)\n            setMorphImageResponse(null)\n            throw err\n          }\n        })\n        .then(resJson => {\n          // On success, hide the loading spinner\n          setIsLoading(false)\n          setIsSuccess(true)\n          setIsFailure(false)\n          setMorphImageResponse(resJson)\n\n          Analytics.logEvent('ButtonTapped', {\n            name: 'MorphSuccess',\n            screen: 'main',\n            purpose: 'Morph was successful'\n          })\n\n          return resJson.data\n        })\n        .catch((error) => {\n          console.error(error)\n          Analytics.logEvent('ButtonTapped', {\n            name: 'MorphFailure',\n            screen: 'main',\n            purpose: error.message\n          })\n        })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  function getMorphedImg () {\n    Analytics.logEvent('ButtonTapped', {\n      name: 'GetMorph',\n      screen: 'main',\n      purpose: 'Begin the morph'\n    })\n    WebBrowser.openBrowserAsync(morphImageResponse.toString())\n\n    getMessage();\n  }\n\n  const [userMessage, setUserMessage] = useState('Please upload two images to morph');\n  const [morphBtnText, setMorphBtnText] = useState('Morph');\n\n  const getMessage = () => {\n    if (isLoading) {\n      setUserMessage('Morphing Images')\n    }\n    if (morphImageResponse) {\n      setUserMessage('')\n    }\n    if (isFailure) {\n      setUserMessage('Morph Failed. Please try again.')\n    }\n    if (!firstImageRef && !secondImageRef) {\n      setUserMessage('Upload two faces to morph')\n    }\n    if (!firstImageRef && secondImageRef) {\n      setUserMessage('Upload the first image')\n    }\n    if (firstImageRef && !secondImageRef) {\n      setUserMessage('Upload the second image')\n    }\n    if (firstImageRef instanceof Error) {\n      setUserMessage('First image is invalid. Please upload again.')\n    }\n    if (secondImageRef instanceof Error) {\n      setUserMessage('Second image is invalid. Please upload again.')\n    }\n  }\n\n  return (\n    <View>\n      <Button  onPress={() => getMorphedImg()} mode=\"outlined\">\n        <Text>{morphBtnText}</Text>\n      </Button>\n      <Text style={styles.message}>{userMessage}</Text>\n    </View>\n  )\n\n\n  if (isLoading) {\n    return (\n      <View style={styles.morphArea}>\n        <View style={styles.morphBtn}>\n          <Text style={styles.morphTxt}>\n            Morphing Images\n            <ActivityIndicator size=\"small\"/>\n          </Text>\n        </View>\n      </View>\n    )\n  }\n\n  if (morphImageResponse) {\n    getMorphedImg()\n    return (\n      <View>\n        <Button  onPress={() => getMorphedImg()} mode=\"contained\">\n          <Text>Open Image</Text>\n        </Button>\n      </View>\n    )\n  }\n\n  if (isFailure) {\n    return (\n      <View>\n        <Text style={styles.morphTxt}>Morph Failed</Text>\n        <Button onPress={() => setInitialMorphState()} mode=\"contained\">\n          Reset\n        </Button>\n      </View>\n    )\n  }\n\n  if (!firstImageRef && !secondImageRef) {\n    return (\n        <Button mode=\"contained\" dark={true}>\n          Upload two faces to morph\n        </Button>\n    )\n  }\n\n  if (firstImageRef instanceof Error) {\n    return (\n      <View>\n      <Text style={styles.morphTxt}>Re-Upload first image</Text>\n      <Button onPress={() => getMorphedImg()} mode=\"contained\" >\n        Morph\n      </Button>  \n      </View>\n    )\n  }\n\n  if (secondImageRef instanceof Error) {\n    return (\n      <View style={styles.morphArea} >\n        <TouchableOpacity style={styles.morphBtn}>\n            <Text style={styles.morphTxt}>Re-Upload second image</Text>\n        </TouchableOpacity>\n      </View>\n    )\n  }\n\n  if (firstImageRef && !secondImageRef) {\n    return (\n      <View style={styles.morphArea} >\n        <TouchableOpacity style={styles.morphBtn}>\n            <Text style={styles.morphTxt}>Upload the second face</Text>\n        </TouchableOpacity>\n      </View>\n    )\n  }\n\n  if (!firstImageRef && secondImageRef) {\n    return (\n      <View style={styles.morphArea} >\n        <TouchableOpacity style={styles.morphBtn}>\n            <Text style={styles.morphTxt}>Upload the first face</Text>\n        </TouchableOpacity>\n      </View>\n    )\n  }\n\n  if (!morphImageResponse) {\n    return (\n      <View style={styles.morphArea}>\n        <TouchableOpacity style={styles.morphBtn} onPress={() => getMorph(firstImageRef, secondImageRef)}>\n          <Text style={styles.morphTxt}>Let's morph</Text>\n        </TouchableOpacity>\n      </View>\n    )\n  }\n\n  return (null)\n}\n\nconst styles = StyleSheet.create({\n  morphArea: {\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  morphBtn: {\n    borderRadius: 10,\n    borderWidth: 2,\n    backgroundColor: '#fbfbfb',\n    width: 300,\n    height: 50,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  morphTxt: {\n    fontFamily: 'System',\n    fontSize: 18,\n    color: '#2b2b2b',\n    fontWeight: 'bold'\n  }\n})\n"]},"metadata":{},"sourceType":"module"}