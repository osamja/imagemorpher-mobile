{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/App.js\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { UploadImagesView } from \"./src/components/UploadImagesView\";\nimport { MorphResponseView } from \"./src/components/MorphResponseView\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts } from 'expo-font';\nexport default function App() {\n  var _this = this;\n\n  var _useFonts = useFonts({\n    Roboto: require(\"./assets/fonts/Roboto_Slab/RobotoSlab-VariableFont_wght.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstImageRef = _useState2[0],\n      setFirstImageRef = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secondImageRef = _useState4[0],\n      setSecondImageRef = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      morphImageResponse = _useState6[0],\n      setMorphImageResponse = _useState6[1];\n\n  var getView = function getView() {\n    if (morphImageResponse) {\n      return React.createElement(MorphResponseView, {\n        firstImageRef: firstImageRef,\n        secondImageRef: secondImageRef,\n        morphImageResponse: morphImageResponse,\n        setFirstImageRef: setFirstImageRef,\n        setSecondImageRef: setSecondImageRef,\n        setMorphImageResponse: setMorphImageResponse,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return React.createElement(UploadImagesView, {\n      firstImageRef: firstImageRef,\n      secondImageRef: secondImageRef,\n      morphImageResponse: morphImageResponse,\n      setFirstImageRef: setFirstImageRef,\n      setSecondImageRef: setSecondImageRef,\n      setMorphImageResponse: setMorphImageResponse,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return React.createElement(LinearGradient, {\n    colors: ['#c2e9fb', '#a1c4fd'],\n    style: styles.background,\n    start: [0, 0],\n    end: [1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Face Morpher\"), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, getView()));\n}\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    marginTop: 50,\n    fontSize: 35,\n    textAlign: 'center',\n    color: '#2b2b2b',\n    fontFamily: 'Roboto'\n  },\n  reset: {\n    width: 40,\n    height: 40,\n    margin: 25\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/App.js"],"names":["React","useState","UploadImagesView","MorphResponseView","LinearGradient","useFonts","App","Roboto","require","loaded","firstImageRef","setFirstImageRef","secondImageRef","setSecondImageRef","morphImageResponse","setMorphImageResponse","getView","styles","background","title","container","StyleSheet","create","flex","flexDirection","justifyContent","alignItems","marginTop","fontSize","textAlign","color","fontFamily","reset","width","height","margin"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity, Image } from 'react-native'\n\n// views\nimport { UploadImagesView }from './src/components/UploadImagesView'\nimport { MorphResponseView } from './src/components/MorphResponseView'\n\nimport { LinearGradient } from 'expo-linear-gradient'\nimport { useFonts } from 'expo-font'\n\nexport default function App () {\n  const [loaded] = useFonts({\n    Roboto: require('./assets/fonts/Roboto_Slab/RobotoSlab-VariableFont_wght.ttf')\n  })\n\n  const [firstImageRef, setFirstImageRef] = useState(null)\n  const [secondImageRef, setSecondImageRef] = useState(null)\n  const [morphImageResponse, setMorphImageResponse] = useState(null)\n\n  const getView = () => {\n    if (morphImageResponse) {\n      return (\n        <MorphResponseView\n          firstImageRef={firstImageRef}\n          secondImageRef={secondImageRef}\n          morphImageResponse={morphImageResponse}\n    \n          setFirstImageRef={setFirstImageRef}\n          setSecondImageRef={setSecondImageRef}\n          setMorphImageResponse={setMorphImageResponse}\n      />\n      )\n    }\n    return (\n      <UploadImagesView\n        firstImageRef={firstImageRef}\n        secondImageRef={secondImageRef}\n        morphImageResponse={morphImageResponse}\n  \n        setFirstImageRef={setFirstImageRef}\n        setSecondImageRef={setSecondImageRef}\n        setMorphImageResponse={setMorphImageResponse}\n      />\n    )\n  }\n\n  return (\n    <LinearGradient\n      colors={['#c2e9fb', '#a1c4fd']}\n      style={styles.background}\n      start={[0, 0]}\n      end={[1, 1]}\n    >\n      <Text style={styles.title}>Face Morpher</Text>\n        <View style={styles.container}>\n        {getView()}\n      </View>\n    </LinearGradient>\n  )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  title: {\n    marginTop: 50,\n    fontSize: 35 ,\n    textAlign: 'center',\n    color: '#2b2b2b',\n    fontFamily: 'Roboto'\n  },\n  reset: {\n    width: 40,\n    height: 40,\n    margin: 25\n  }\n})\n"]},"metadata":{},"sourceType":"module"}