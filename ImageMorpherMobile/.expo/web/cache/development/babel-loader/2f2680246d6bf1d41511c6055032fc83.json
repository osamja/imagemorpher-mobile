{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from '@unimodules/core';\nimport { DEFAULT_APP_OPTIONS } from 'expo-firebase-core';\n\nfunction getFirebaseModule() {\n  try {\n    var firebaseModule = require('firebase/app');\n\n    var firebase = firebaseModule.initializeApp ? firebaseModule : firebaseModule.default;\n\n    if (DEFAULT_APP_OPTIONS && !firebase.apps.length) {\n      firebase.initializeApp(DEFAULT_APP_OPTIONS);\n    }\n\n    return firebase;\n  } catch (_ref) {\n    var message = _ref.message;\n    throw new Error('Firebase JS SDK is not installed: ' + message);\n  }\n}\n\nfunction getAnalyticsModule() {\n  try {\n    var firebase = getFirebaseModule();\n\n    require('firebase/analytics');\n\n    return firebase.analytics();\n  } catch (_ref2) {\n    var message = _ref2.message;\n    throw new Error('Firebase JS Analytics SDK is not available: ' + message);\n  }\n}\n\nexport default {\n  get name() {\n    return 'ExpoFirebaseAnalytics';\n  },\n\n  logEvent: function logEvent(name, properties) {\n    return _regeneratorRuntime.async(function logEvent$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            getAnalyticsModule().logEvent(name, properties);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setAnalyticsCollectionEnabled: function setAnalyticsCollectionEnabled(isEnabled) {\n    return _regeneratorRuntime.async(function setAnalyticsCollectionEnabled$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            getAnalyticsModule().setAnalyticsCollectionEnabled(isEnabled);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setCurrentScreen: function setCurrentScreen(screenName, screenClassOverride) {\n    return _regeneratorRuntime.async(function setCurrentScreen$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            getAnalyticsModule().setCurrentScreen(screenName);\n\n            if (screenName) {\n              getAnalyticsModule().logEvent('screen_view', {\n                screen_name: screenName\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setUserId: function setUserId(userId) {\n    return _regeneratorRuntime.async(function setUserId$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            getAnalyticsModule().setUserId(userId);\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setUserProperties: function setUserProperties(properties) {\n    return _regeneratorRuntime.async(function setUserProperties$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            getAnalyticsModule().setUserProperties(properties);\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setUnavailabilityLogging: function setUnavailabilityLogging(isEnabled) {},\n  setDebugModeEnabled: function setDebugModeEnabled(isEnabled) {\n    return _regeneratorRuntime.async(function setDebugModeEnabled$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            throw new CodedError('ERR_FIREBASE_NOTCONFIGURED', \"setDebugModeEnabled is not available on the web. See \\\"https://firebase.google.com/docs/analytics/debugview\\\" on how to enable debug mode.\");\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoFirebaseAnalytics.web.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,mBAAT,QAAoC,oBAApC;;AAEA,SAAS,iBAAT,GAA0B;AACxB,MAAI;AACF,QAAM,cAAc,GAAG,OAAO,CAAC,cAAD,CAA9B;;AACA,QAAM,QAAQ,GAAG,cAAc,CAAC,aAAf,GAA+B,cAA/B,GAAgD,cAAc,CAAC,OAAhF;;AACA,QAAI,mBAAmB,IAAI,CAAC,QAAQ,CAAC,IAAT,CAAc,MAA1C,EAAkD;AAChD,MAAA,QAAQ,CAAC,aAAT,CAAuB,mBAAvB;AACD;;AACD,WAAO,QAAP;AACD,GAPD,CAOE,aAAoB;AAAA,QAAX,OAAW,QAAX,OAAW;AACpB,UAAM,IAAI,KAAJ,CAAU,uCAAuC,OAAjD,CAAN;AACD;AACF;;AACD,SAAS,kBAAT,GAA2B;AACzB,MAAI;AACF,QAAM,QAAQ,GAAG,iBAAiB,EAAlC;;AACA,IAAA,OAAO,CAAC,oBAAD,CAAP;;AACA,WAAO,QAAQ,CAAC,SAAT,EAAP;AACD,GAJD,CAIE,cAAoB;AAAA,QAAX,OAAW,SAAX,OAAW;AACpB,UAAM,IAAI,KAAJ,CAAU,iDAAiD,OAA3D,CAAN;AACD;AACF;;AAED,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,uBAAP;AACD,GAHY;;AAOP,EAAA,QAPO,oBAOE,IAPF,EAOgB,UAPhB;AAAA;AAAA;AAAA;AAAA;AAQX,YAAA,kBAAkB,GAAG,QAArB,CAA8B,IAA9B,EAAoC,UAApC;;AARW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,EAAA,6BAbO,yCAauB,SAbvB;AAAA;AAAA;AAAA;AAAA;AAcX,YAAA,kBAAkB,GAAG,6BAArB,CAAmD,SAAnD;;AAdW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBP,EAAA,gBAnBO,4BAmBU,UAnBV,EAmB+B,mBAnB/B;AAAA;AAAA;AAAA;AAAA;AAoBX,YAAA,kBAAkB,GAAG,gBAArB,CAAsC,UAAtC;;AAKA,gBAAI,UAAJ,EAAgB;AACd,cAAA,kBAAkB,GAAG,QAArB,CAA8B,aAA9B,EAA6C;AAC3C,gBAAA,WAAW,EAAE;AAD8B,eAA7C;AAGD;;AA7BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCP,EAAA,SAlCO,qBAkCG,MAlCH;AAAA;AAAA;AAAA;AAAA;AAmCX,YAAA,kBAAkB,GAAG,SAArB,CAA+B,MAA/B;;AAnCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCP,EAAA,iBAxCO,6BAwCW,UAxCX;AAAA;AAAA;AAAA;AAAA;AAyCX,YAAA,kBAAkB,GAAG,iBAArB,CAAuC,UAAvC;;AAzCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8Cb,EAAA,wBA9Ca,oCA8CY,SA9CZ,EA8C8B,CAE1C,CAhDY;AAoDP,EAAA,mBApDO,+BAoDa,SApDb;AAAA;AAAA;AAAA;AAAA;AAAA,kBAqDL,IAAI,UAAJ,CACJ,4BADI,+IArDK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { DEFAULT_APP_OPTIONS } from 'expo-firebase-core';\n\nfunction getFirebaseModule() {\n  try {\n    const firebaseModule = require('firebase/app');\n    const firebase = firebaseModule.initializeApp ? firebaseModule : firebaseModule.default;\n    if (DEFAULT_APP_OPTIONS && !firebase.apps.length) {\n      firebase.initializeApp(DEFAULT_APP_OPTIONS);\n    }\n    return firebase;\n  } catch ({ message }) {\n    throw new Error('Firebase JS SDK is not installed: ' + message);\n  }\n}\nfunction getAnalyticsModule() {\n  try {\n    const firebase = getFirebaseModule();\n    require('firebase/analytics');\n    return firebase.analytics();\n  } catch ({ message }) {\n    throw new Error('Firebase JS Analytics SDK is not available: ' + message);\n  }\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFirebaseAnalytics';\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#log-event\n   */\n  async logEvent(name: string, properties?: { [key: string]: any }): Promise<void> {\n    getAnalyticsModule().logEvent(name, properties);\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-analytics-collection-enabled\n   */\n  async setAnalyticsCollectionEnabled(isEnabled: boolean): Promise<void> {\n    getAnalyticsModule().setAnalyticsCollectionEnabled(isEnabled);\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-current-screen\n   */\n  async setCurrentScreen(screenName?: string, screenClassOverride?: string): Promise<void> {\n    getAnalyticsModule().setCurrentScreen(screenName);\n\n    // On web, calling `setCurrentScreen` does not automatically record a screen_view event as\n    // it does on native. We therefore record the 'screen_view' event manually.\n    // https://stackoverflow.com/questions/59330467/how-to-track-page-view-with-firebase-analytics-in-a-web-single-page-app\n    if (screenName) {\n      getAnalyticsModule().logEvent('screen_view', {\n        screen_name: screenName,\n      });\n    }\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-user-id\n   */\n  async setUserId(userId: string | null): Promise<void> {\n    getAnalyticsModule().setUserId(userId);\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-user-properties\n   */\n  async setUserProperties(properties: { [key: string]: any }): Promise<void> {\n    getAnalyticsModule().setUserProperties(properties);\n  },\n  /**\n   * No implementation on web\n   */\n  setUnavailabilityLogging(isEnabled: boolean): void {\n    // nop\n  },\n  /**\n   * Not supported on web\n   */\n  async setDebugModeEnabled(isEnabled: boolean): Promise<void> {\n    throw new CodedError(\n      'ERR_FIREBASE_NOTCONFIGURED',\n      `setDebugModeEnabled is not available on the web. See \"https://firebase.google.com/docs/analytics/debugview\" on how to enable debug mode.`\n    );\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}