{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React, { useState } from 'react'\n// import { View, StyleSheet, ActivityIndicator } from 'react-native'\n// import { Button } from 'react-native-paper';\n// import * as WebBrowser from 'expo-web-browser'\n// import * as Analytics from 'expo-firebase-analytics'\n\n// import { morph_endpoint } from '../../constants/index'\n\n// export function MorphImageButton ({\n//   firstImageRef,\n//   secondImageRef,\n//   morphImageResponse,\n//   setFirstImageRef,\n//   setSecondImageRef,\n//   setMorphImageResponse\n// }) {\n  \n//   const [isLoading, setIsLoading] = useState(false)\n//   const [isSuccess, setIsSuccess] = useState(false)\n//   const [isFailure, setIsFailure] = useState(false)\n\n//   function setInitialMorphState () {\n//     setFirstImageRef(null)\n//     setSecondImageRef(null)\n//     setMorphImageResponse(null)\n//     setIsLoading(false)\n//     setIsSuccess(false)\n//     setIsFailure(false)\n//   }\n\n//   function getMorphedImg () {\n//     Analytics.logEvent('ButtonTapped', {\n//       name: 'GetMorph',\n//       screen: 'main',\n//       purpose: 'Begin the morph'\n//     })\n//     WebBrowser.openBrowserAsync(morphImageResponse.toString())\n//   }\n\n//   async function getMorph (firstImageRef, secondImageRef) {\n//     if (!firstImageRef || !secondImageRef) {\n//       return\n//     }\n\n//     try {\n//       await Analytics.logEvent('ButtonTapped', {\n//         name: 'StartMorph',\n//         screen: 'main',\n//         purpose: 'Start the morph'\n//       })\n\n//       const data = new FormData()\n//       data.append('firstImageRef', firstImageRef)\n//       data.append('secondImageRef', secondImageRef)\n//       data.append('isSequence', 'False')\n//       data.append('stepSize', '20')\n//       // Correct\n//       setIsLoading(true)\n//       setIsSuccess(false)\n//       setIsFailure(false)\n//       setMorphImageResponse(null)\n\n//       const response = await\n//       fetch(\n//         morph_endpoint, {\n//           method: 'POST',\n//           headers: {\n//             Authorization: 'ImageMorpherV1'\n//           },\n//           body: data\n//         }\n//       )\n//         .then(res => {\n//           try {\n//             if (res.ok) {\n//               return res.json()\n//             } else {\n//               throw new Error(res)\n//             }\n//           } catch (err) {\n//             console.log(err.message)\n//             setIsLoading(false)\n//             setIsSuccess(false)\n//             setIsFailure(true)\n//             setMorphImageResponse(null)\n//             throw err\n//           }\n//         })\n//         .then(resJson => {\n//           // On success, hide the loading spinner\n//           setIsLoading(false)\n//           setIsSuccess(true)\n//           setIsFailure(false)\n//           setMorphImageResponse(resJson)\n\n//           Analytics.logEvent('ButtonTapped', {\n//             name: 'MorphSuccess',\n//             screen: 'main',\n//             purpose: 'Morph was successful'\n//           })\n\n//           return resJson.data\n//         })\n//         .catch((error) => {\n//           console.error(error)\n//           Analytics.logEvent('ButtonTapped', {\n//             name: 'MorphFailure',\n//             screen: 'main',\n//             purpose: error.message\n//           })\n//         })\n//     } catch (error) {\n//       console.error(error)\n//     }\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <Button mode=\"outlined\">\n//         <ActivityIndicator size=\"small\" />\n//         Morphing \n//       </Button>\n//     )\n//   }\n\n//   if (morphImageResponse) {\n//     return (\n//       <View>\n//         <Button mode=\"outlined\" onPress={() => getMorphedImg()}>\n//           View Image\n//         </Button>\n//       </View>\n//     )\n//   }\n\n//   return (\n//     <View>\n//       <Button onPress={() => getMorph(firstImageRef, secondImageRef)} mode=\"outlined\"> \n//         Morph\n//       </Button>\n//     </View>\n//   )\n// }\n\n// const styles = StyleSheet.create({\n//   morphArea: {\n//     bottom: 0,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     flex: 1\n//   },\n//   morphBtn: {\n//     borderRadius: 10,\n//     borderWidth: 2,\n//     backgroundColor: '#fbfbfb',\n//     width: 300,\n//     height: 50,\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   },\n//   morphTxt: {\n//     fontFamily: 'System',\n//     fontSize: 18,\n//     color: '#2b2b2b',\n//     fontWeight: 'bold'\n//   }\n// })\n"]},"metadata":{},"sourceType":"script"}