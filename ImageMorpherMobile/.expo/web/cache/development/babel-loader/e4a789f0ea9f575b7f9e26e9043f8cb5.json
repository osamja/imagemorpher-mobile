{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/App.js\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { MorphImageButton } from \"./src/components/MorphImageButton\";\nimport { MorphSequenceButton } from \"./src/components/MorphSequenceButton\";\nimport { ImageUploadButton } from \"./src/components/ImageUploadButton\";\nimport { UploadImagesView } from \"./src/components/UploadImagesView\";\nimport { useFonts } from 'expo-font';\nexport default function App() {\n  var _useFonts = useFonts({\n    Roboto: require(\"./assets/fonts/Roboto_Slab/RobotoSlab-VariableFont_wght.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstImageRef = _useState2[0],\n      setFirstImageRef = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secondImageRef = _useState4[0],\n      setSecondImageRef = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      morphImageResponse = _useState6[0],\n      setMorphImageResponse = _useState6[1];\n\n  function setInitialMorphState() {\n    setFirstImageRef(null);\n    setSecondImageRef(null);\n    setMorphImageResponse(null);\n  }\n\n  if (morphImageResponse) {\n    return React.createElement(LinearGradient, {\n      colors: ['#c2e9fb', '#a1c4fd'],\n      style: styles.background,\n      start: [0, 0],\n      end: [1, 1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, \"Face Morpher\"), React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, React.createElement(MorphImageButton, {\n      firstImageRef: firstImageRef,\n      secondImageRef: secondImageRef,\n      morphImageResponse: morphImageResponse,\n      setFirstImageRef: setFirstImageRef,\n      setSecondImageRef: setSecondImageRef,\n      setMorphImageResponse: setMorphImageResponse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    })), React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, React.createElement(MorphSequenceButton, {\n      firstImageRef: firstImageRef,\n      secondImageRef: secondImageRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    })), React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return setInitialMorphState();\n      },\n      style: styles.morphArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, React.createElement(Image, {\n      source: require(\"./assets/redo-arrow.png\"),\n      style: styles.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }))));\n  }\n\n  return React.createElement(UploadImagesView, {\n    firstImageRef: firstImageRef,\n    secondImageRef: secondImageRef,\n    morphImageResponse: morphImageResponse,\n    setFirstImageRef: setFirstImageRef,\n    setSecondImageRef: setSecondImageRef,\n    setMorphImageResponse: setMorphImageResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  });\n  return React.createElement(LinearGradient, {\n    colors: ['#c2e9fb', '#a1c4fd'],\n    style: styles.background,\n    start: [0, 0],\n    end: [1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Face Morpher\"), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, React.createElement(ImageUploadButton, {\n    imageRef: firstImageRef,\n    setImageRef: setFirstImageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }), React.createElement(ImageUploadButton, {\n    imageRef: secondImageRef,\n    setImageRef: setSecondImageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }), React.createElement(MorphImageButton, {\n    firstImageRef: firstImageRef,\n    secondImageRef: secondImageRef,\n    morphImageResponse: morphImageResponse,\n    setFirstImageRef: setFirstImageRef,\n    setSecondImageRef: setSecondImageRef,\n    setMorphImageResponse: setMorphImageResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1\n  },\n  morphArea: {\n    bottom: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  title: {\n    marginTop: 30,\n    fontSize: 40,\n    textAlign: 'center',\n    color: '#2b2b2b',\n    fontWeight: 'bold',\n    fontFamily: 'Roboto'\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column'\n  },\n  reset: {\n    width: 40,\n    height: 40,\n    margin: 25\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/App.js"],"names":["React","useState","LinearGradient","MorphImageButton","MorphSequenceButton","ImageUploadButton","UploadImagesView","useFonts","App","Roboto","require","loaded","firstImageRef","setFirstImageRef","secondImageRef","setSecondImageRef","morphImageResponse","setMorphImageResponse","setInitialMorphState","styles","background","title","container","morphArea","reset","StyleSheet","create","flex","bottom","justifyContent","alignItems","marginTop","fontSize","textAlign","color","fontWeight","fontFamily","flexDirection","width","height","margin"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity, Image } from 'react-native'\n\nimport { LinearGradient } from 'expo-linear-gradient'\nimport { MorphImageButton } from './src/components/MorphImageButton'\nimport { MorphSequenceButton } from './src/components/MorphSequenceButton'\nimport { ImageUploadButton } from './src/components/ImageUploadButton'\nimport { UploadImagesView } from './src/components/UploadImagesView'\nimport { useFonts } from 'expo-font'\n\nexport default function App () {\n  const [loaded] = useFonts({\n    Roboto: require('./assets/fonts/Roboto_Slab/RobotoSlab-VariableFont_wght.ttf')\n  })\n\n  const [firstImageRef, setFirstImageRef] = useState(null)\n  const [secondImageRef, setSecondImageRef] = useState(null)\n  const [morphImageResponse, setMorphImageResponse] = useState(null)\n\n  function setInitialMorphState () {\n    setFirstImageRef(null)\n    setSecondImageRef(null)\n    setMorphImageResponse(null)\n  }\n\n  // If halfway morph image was successful, allow user to generate morph sequence\n  if (morphImageResponse) {\n    return (\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['#c2e9fb', '#a1c4fd']}\n        style={styles.background}\n        start={[0, 0]}\n        end={[1, 1]}\n      >\n        <Text style={styles.title}>Face Morpher</Text>\n        <View style={styles.container}>\n          <MorphImageButton\n            firstImageRef={firstImageRef}\n            secondImageRef={secondImageRef}\n            morphImageResponse={morphImageResponse}\n\n            setFirstImageRef={setFirstImageRef}\n            setSecondImageRef={setSecondImageRef}\n            setMorphImageResponse={setMorphImageResponse}\n          />\n        </View>\n        <View style={styles.container}>\n          <MorphSequenceButton\n            firstImageRef={firstImageRef}\n            secondImageRef={secondImageRef}\n          />\n        </View>\n        <View>\n          <TouchableOpacity onPress={() => setInitialMorphState()} style={styles.morphArea}>\n                <Image source={require('./assets/redo-arrow.png')} style={styles.reset}></Image>\n          </TouchableOpacity>\n        </View>\n    </LinearGradient>\n    )\n  }\n\n  return (\n    <UploadImagesView\n      firstImageRef={firstImageRef}\n      secondImageRef={secondImageRef}\n      morphImageResponse={morphImageResponse}\n\n      setFirstImageRef={setFirstImageRef}\n      setSecondImageRef={setSecondImageRef}\n      setMorphImageResponse={setMorphImageResponse}\n    />\n  )\n\n  return (\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['#c2e9fb', '#a1c4fd']}\n        style={styles.background}\n        start={[0, 0]}\n        end={[1, 1]}\n      >\n        <Text style={styles.title}>Face Morpher</Text>\n        <View style={styles.container}>\n          <ImageUploadButton\n            imageRef={firstImageRef}\n            setImageRef={setFirstImageRef}\n          />\n          <ImageUploadButton\n            imageRef={secondImageRef}\n            setImageRef={setSecondImageRef}\n          />\n          <MorphImageButton\n            firstImageRef={firstImageRef}\n            secondImageRef={secondImageRef}\n            morphImageResponse={morphImageResponse}\n\n            setFirstImageRef={setFirstImageRef}\n            setSecondImageRef={setSecondImageRef}\n            setMorphImageResponse={setMorphImageResponse}\n          />\n        </View>\n    </LinearGradient>\n  )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1\n  },\n  morphArea: {\n    bottom: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  title: {\n    marginTop: 30,\n    fontSize: 40,\n    textAlign: 'center',\n    color: '#2b2b2b',\n    fontWeight: 'bold',\n    fontFamily: 'Roboto'\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    // alignItems: 'center',\n    // justifyContent: 'center'\n  },\n  reset: {\n    width: 40,\n    height: 40,\n    margin: 25\n  }\n})\n"]},"metadata":{},"sourceType":"module"}