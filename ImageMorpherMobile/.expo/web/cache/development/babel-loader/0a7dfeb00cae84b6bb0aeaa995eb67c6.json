{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/buttons/MorphButton.jsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Button } from 'react-native-paper';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Analytics from 'expo-firebase-analytics';\nimport { morph_endpoint } from \"../../constants/index\";\nexport function MorphButton(_ref) {\n  var isGif = _ref.isGif,\n      firstImageRef = _ref.firstImageRef,\n      secondImageRef = _ref.secondImageRef,\n      morphResponse = _ref.morphResponse,\n      setMorphResponse = _ref.setMorphResponse;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSuccess = _useState4[0],\n      setIsSuccess = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFailure = _useState6[0],\n      setIsFailure = _useState6[1];\n\n  function getMorphResponse() {\n    Analytics.logEvent('ButtonTapped', {\n      name: isGif ? 'GetMorphSequence' : 'GetMorph',\n      screen: 'main',\n      purpose: 'Begin the morph'\n    });\n    WebBrowser.openBrowserAsync(morphResponse.toString());\n  }\n\n  function getMorph(firstImageRef, secondImageRef) {\n    var data, response;\n    return _regeneratorRuntime.async(function getMorph$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!firstImageRef || !secondImageRef)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Analytics.logEvent('ButtonTapped', {\n              name: isGif ? 'StartMorphSequence' : 'StartMorph',\n              screen: 'main',\n              purpose: isGif ? 'Start the morph sequence' : 'Start the morph'\n            }));\n\n          case 5:\n            data = new FormData();\n            data.append('firstImageRef', firstImageRef);\n            data.append('secondImageRef', secondImageRef);\n            data.append('isSequence', isGif ? 'True' : 'False');\n            data.append('stepSize', '20');\n            setIsLoading(true);\n            setIsSuccess(false);\n            setIsFailure(false);\n            setMorphResponse(null);\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(fetch(morph_endpoint, {\n              method: 'POST',\n              headers: {\n                Authorization: 'ImageMorpherV1'\n              },\n              body: data\n            }).then(function (res) {\n              try {\n                if (res.ok) {\n                  return res.json();\n                } else {\n                  throw new Error(res);\n                }\n              } catch (err) {\n                console.log(err.message);\n                setIsLoading(false);\n                setIsSuccess(false);\n                setIsFailure(true);\n                setMorphResponse(null);\n                throw err;\n              }\n            }).then(function (resJson) {\n              setIsLoading(false);\n              setIsSuccess(true);\n              setIsFailure(false);\n              setMorphResponse(resJson);\n              Analytics.logEvent('ButtonTapped', {\n                name: isGif ? 'MorphSequenceSuccess' : 'MorphSuccess',\n                screen: 'main',\n                purpose: 'Morph was successful'\n              });\n              return resJson.data;\n            }).catch(function (error) {\n              console.error(error);\n              Analytics.logEvent('ButtonTapped', {\n                name: isGif ? 'MorphSequenceFailure' : 'MorphFailure',\n                screen: 'main',\n                purpose: error.message\n              });\n            }));\n\n          case 16:\n            response = _context.sent;\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(_context.t0);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 19]], Promise);\n  }\n\n  var type = isGif ? 'GIF' : 'Image';\n\n  if (isLoading) {\n    return React.createElement(Button, {\n      mode: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }), \"Creating \", type);\n  }\n\n  if (morphResponse) {\n    getMorphResponse();\n    return React.createElement(Button, {\n      mode: \"outlined\",\n      onPress: getMorphResponse(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, \"View \", type);\n  }\n\n  if (isFailure) {\n    return React.createElement(Button, {\n      mode: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, \"Morph Sequence Failed\");\n  }\n\n  return React.createElement(Button, {\n    onPress: function onPress() {\n      return getMorph(firstImageRef, secondImageRef);\n    },\n    mode: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, \"Morph \", type);\n}\nvar styles = StyleSheet.create({\n  morphArea: {\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  morphTxt: {\n    fontFamily: 'System',\n    fontSize: 18,\n    color: '#2b2b2b',\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["/Users/zuby/Desktop/imagemorpher-mobile/ImageMorpherMobile/src/components/buttons/MorphButton.jsx"],"names":["React","useState","Button","WebBrowser","Analytics","morph_endpoint","MorphButton","isGif","firstImageRef","secondImageRef","morphResponse","setMorphResponse","isLoading","setIsLoading","isSuccess","setIsSuccess","isFailure","setIsFailure","getMorphResponse","logEvent","name","screen","purpose","openBrowserAsync","toString","getMorph","data","FormData","append","fetch","method","headers","Authorization","body","then","res","ok","json","Error","err","console","log","message","resJson","catch","error","response","type","styles","StyleSheet","create","morphArea","bottom","justifyContent","alignItems","flex","morphTxt","fontFamily","fontSize","color","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { View, StyleSheet, ActivityIndicator } from 'react-native'\nimport { Button } from 'react-native-paper';\nimport * as WebBrowser from 'expo-web-browser'\nimport * as Analytics from 'expo-firebase-analytics'\n\nimport { morph_endpoint } from '../../constants/index'\n\nexport function MorphButton({\n  isGif,\n  firstImageRef,\n  secondImageRef,\n  morphResponse,\n  setMorphResponse\n}) {\n    \n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [isFailure, setIsFailure] = useState(false)\n\n  function getMorphResponse() {\n    Analytics.logEvent('ButtonTapped', {\n        name: (isGif ? 'GetMorphSequence' : 'GetMorph'),\n        screen: 'main',\n        purpose: 'Begin the morph'\n      })\n      WebBrowser.openBrowserAsync(morphResponse.toString())\n  }\n\n  async function getMorph (firstImageRef, secondImageRef) {\n    if (!firstImageRef || !secondImageRef) {\n      return\n    }\n   \n    try {\n      await Analytics.logEvent('ButtonTapped', {\n        name: (isGif ? 'StartMorphSequence' : 'StartMorph'),\n        screen: 'main',\n        purpose: (isGif ? 'Start the morph sequence' : 'Start the morph'),\n      })\n\n      const data = new FormData()\n      data.append('firstImageRef', firstImageRef)\n      data.append('secondImageRef', secondImageRef)\n      data.append('isSequence', (isGif ? 'True' : 'False'))\n      data.append('stepSize', '20')\n      // Correct\n      setIsLoading(true)\n      setIsSuccess(false)\n      setIsFailure(false)\n      setMorphResponse(null)\n\n      const response = await\n      fetch(\n        morph_endpoint, {\n          method: 'POST',\n          headers: {\n            Authorization: 'ImageMorpherV1'\n          },\n          body: data\n        }\n      )\n        .then(res => {\n          try {\n            if (res.ok) {\n              return res.json()\n            } else {\n              throw new Error(res)\n            }\n          } catch (err) {\n            console.log(err.message)\n            setIsLoading(false)\n            setIsSuccess(false)\n            setIsFailure(true)\n            setMorphResponse(null)\n            throw err\n          }\n        })\n        .then(resJson => {\n          // On success, hide the loading spinner\n          setIsLoading(false)\n          setIsSuccess(true)\n          setIsFailure(false)\n          setMorphResponse(resJson)\n\n          Analytics.logEvent('ButtonTapped', {\n            name: (isGif ? 'MorphSequenceSuccess' : 'MorphSuccess'),\n            screen: 'main',\n            purpose: 'Morph was successful'\n          })\n\n          return resJson.data\n        })\n        .catch((error) => {\n          console.error(error)\n          Analytics.logEvent('ButtonTapped', {\n            name: (isGif ? 'MorphSequenceFailure' : 'MorphFailure'),\n            screen: 'main',\n            purpose: error.message\n          })\n        })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const type = (isGif ? 'GIF' : 'Image')\n\n  if (isLoading) {\n    return (\n      <Button mode=\"outlined\">\n        <ActivityIndicator size=\"small\" />\n        Creating {type}\n      </Button>\n    )\n  }\n\n  if (morphResponse) {\n    getMorphResponse()\n    return (\n      <Button mode=\"outlined\" onPress={getMorphResponse()}>\n        View {type}\n      </Button>\n    )\n  }\n\n  if (isFailure) {\n    return (\n      <Button \n        mode=\"contained\"\n      >\n        Morph Sequence Failed\n      </Button>\n    )\n  }\n\n  return (\n    <Button onPress={() => getMorph(firstImageRef, secondImageRef)} mode=\"outlined\"> \n      Morph {type}\n  </Button>\n  )\n}\n\nconst styles = StyleSheet.create({\n  morphArea: {\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  morphTxt: {\n    fontFamily: 'System',\n    fontSize: 18,\n    color: '#2b2b2b',\n    fontWeight: 'bold'\n  }\n})\n"]},"metadata":{},"sourceType":"module"}