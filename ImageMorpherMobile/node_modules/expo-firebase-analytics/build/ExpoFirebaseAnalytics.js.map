{"version":3,"file":"ExpoFirebaseAnalytics.js","sourceRoot":"","sources":["../src/ExpoFirebaseAnalytics.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModulesProxy, UnavailabilityError, CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { DEFAULT_APP_NAME, DEFAULT_APP_OPTIONS, DEFAULT_WEB_APP_OPTIONS } from 'expo-firebase-core';\nimport { Platform } from 'react-native';\n\nimport FirebaseAnalyticsJS from './FirebaseAnalyticsJS';\nconst { ExpoFirebaseAnalytics } = NativeModulesProxy;\n\nif (!ExpoFirebaseAnalytics) {\n  console.warn(\n    \"No native ExpoFirebaseAnalytics module found, are you sure the expo-firebase-analytics's module is linked properly?\"\n  );\n}\n\nlet pureJSAnalyticsTracker: FirebaseAnalyticsJS | void;\nlet isUnavailabilityLoggingEnabled = true;\nlet isUnavailabilityWarningLogged = false;\nlet clientIdForJS: string;\n\nfunction callAnalyticsModule(funcName: string, ...args) {\n  if (!ExpoFirebaseAnalytics[funcName]) {\n    if (funcName === 'setDebugModeEnabled') {\n      // Debug-mode can only be enabled for the pure JS Analytics Tracker\n      // For all other environments, the platform specific method must be used.\n      // https://firebase.google.com/docs/analytics/debugview\n      if (!(DEFAULT_APP_NAME !== '[DEFAULT]' && DEFAULT_WEB_APP_OPTIONS)) {\n        throw new CodedError(\n          'ERR_FIREBASE_NOTCONFIGURED',\n          `setDebugModeEnabled is not available in this environment. See \"https://firebase.google.com/docs/analytics/debugview\" on how to enable debug mode.`\n        );\n      }\n    } else {\n      throw new UnavailabilityError('expo-firebase-analytics', funcName);\n    }\n  }\n  if (!DEFAULT_APP_OPTIONS) {\n    throw new CodedError(\n      'ERR_FIREBASE_NOTCONFIGURED',\n      `Firebase is not configured. Ensure that you have configured '${Platform.select({\n        ios: 'GoogleService-Info.plist',\n        android: 'google-services.json',\n      })}' correctly.`\n    );\n  }\n\n  // Analytics is only available for the [DEFAULT] app. On the Expo client\n  // a sandboxed app is returned which does not support analytics.\n  // In that case we show a warning and log the analytics events to the console.\n  // The user can disable these by calling `setUnavailabilityLogging(false)`.\n  if (DEFAULT_APP_NAME !== '[DEFAULT]') {\n    if (DEFAULT_WEB_APP_OPTIONS && !pureJSAnalyticsTracker) {\n      pureJSAnalyticsTracker = new FirebaseAnalyticsJS(DEFAULT_WEB_APP_OPTIONS, {\n        clientId: clientIdForJS ?? Constants.installationId,\n        sessionId: Constants.sessionId,\n        strictNativeEmulation: true,\n        appName: Constants.manifest?.name || 'Unnamed Expo project',\n        appVersion: Constants.nativeAppVersion || undefined,\n        headers: {\n          // Google Analaytics seems to ignore certain user-agents. (e.g. \"okhttp/3.12.1\")\n          // Set a user-agent that clearly identifies the Expo client.\n          'user-agent': `Expo/${Constants.nativeAppVersion}`,\n        },\n      });\n    }\n    if (pureJSAnalyticsTracker) {\n      return pureJSAnalyticsTracker[funcName].call(pureJSAnalyticsTracker, ...args);\n    }\n    if (isUnavailabilityLoggingEnabled) {\n      if (!isUnavailabilityWarningLogged) {\n        console.warn(\n          `Firebase Analytics is not available in the Expo client. See \"https://docs.expo.io/versions/latest/sdk/firebase-analytics\" on more information on setting up Firebase Analytics with the standard Expo client.`\n        );\n        isUnavailabilityWarningLogged = true;\n      }\n      console.info(`ExpoFirebaseAnalytics.${funcName}: ${JSON.stringify(args)}`);\n    }\n    return;\n  }\n\n  // Make the call\n  return ExpoFirebaseAnalytics[funcName].call(ExpoFirebaseAnalytics, ...args);\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFirebaseAnalytics';\n  },\n  async logEvent(name: string, properties?: { [key: string]: any }): Promise<void> {\n    return callAnalyticsModule('logEvent', name, properties);\n  },\n  async setAnalyticsCollectionEnabled(isEnabled: boolean): Promise<void> {\n    return callAnalyticsModule('setAnalyticsCollectionEnabled', isEnabled);\n  },\n  async setCurrentScreen(screenName?: string, screenClassOverride?: string): Promise<void> {\n    return callAnalyticsModule('setCurrentScreen', screenName, screenClassOverride);\n  },\n  async setSessionTimeoutDuration(sessionTimeoutInterval: number): Promise<void> {\n    return callAnalyticsModule('setSessionTimeoutDuration', sessionTimeoutInterval);\n  },\n  async setUserId(userId: string | null): Promise<void> {\n    return callAnalyticsModule('setUserId', userId);\n  },\n  async setUserProperties(properties: { [key: string]: any }): Promise<void> {\n    return callAnalyticsModule('setUserProperties', properties);\n  },\n  async resetAnalyticsData(): Promise<void> {\n    return callAnalyticsModule('resetAnalyticsData');\n  },\n  setUnavailabilityLogging(isEnabled: boolean): void {\n    isUnavailabilityLoggingEnabled = isEnabled;\n  },\n  async setDebugModeEnabled(isEnabled: boolean): Promise<void> {\n    return callAnalyticsModule('setDebugModeEnabled', isEnabled);\n  },\n  setClientId(clientId: string): void {\n    clientIdForJS = clientId;\n    if (pureJSAnalyticsTracker) {\n      pureJSAnalyticsTracker.setClientId(clientId);\n    }\n  },\n};\n"]}