{"version":3,"file":"Analytics.js","sourceRoot":"","sources":["../src/Analytics.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAEvD,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAE,OAAO,IAAI,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAEvE,IAAI,CAAC,qBAAqB,EAAE;IAC1B,OAAO,CAAC,IAAI,CACV,qHAAqH,CACtH,CAAC;CACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCG;AACH,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,IAAY,EAAE,UAAmC;IAC9E,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE;QACnC,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,UAAU,CAAC,CAAC;KACtE;IACD,OAAO,MAAM,qBAAqB,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAChE,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,6BAA6B,CAAC,SAAkB;IACpE,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE;QACxD,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,+BAA+B,CAAC,CAAC;KAC3F;IACD,OAAO,MAAM,qBAAqB,CAAC,6BAA6B,CAAC,SAAS,CAAC,CAAC;AAC9E,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,UAAmB,EACnB,mBAA4B;IAE5B,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE;QAC3C,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,kBAAkB,CAAC,CAAC;KAC9E;IACD,OAAO,MAAM,qBAAqB,CAAC,gBAAgB,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;AACvF,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAAC,sBAA8B;IAC5E,IAAI,CAAC,qBAAqB,CAAC,yBAAyB,EAAE;QACpD,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,2BAA2B,CAAC,CAAC;KACvF;IACD,OAAO,MAAM,qBAAqB,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC;AACvF,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,MAAqB;IACnD,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE;QACpC,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,WAAW,CAAC,CAAC;KACvE;IACD,OAAO,MAAM,qBAAqB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACvD,CAAC;AAED;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,IAAY,EAAE,KAAa;IAC/D,OAAO,MAAM,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AACpD,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB;IACtC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;QAC7C,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,oBAAoB,CAAC,CAAC;KAChF;IACD,OAAO,MAAM,qBAAqB,CAAC,kBAAkB,EAAE,CAAC;AAC1D,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,UAAqC;IAC3E,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE;QAC5C,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,mBAAmB,CAAC,CAAC;KAC/E;IACD,OAAO,MAAM,qBAAqB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;AACnE,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,wBAAwB,CAAC,SAAkB;IACzD,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,EAAE;QACnD,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,0BAA0B,CAAC,CAAC;KACtF;IACD,qBAAqB,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;AAC5D,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,WAAW,CAAC,QAAgB;IAC1C,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE;QACtC,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,aAAa,CAAC,CAAC;KACzE;IACD,qBAAqB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAC9C,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,SAAkB;IAC1D,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,EAAE;QAC9C,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,EAAE,qBAAqB,CAAC,CAAC;KACjF;IACD,OAAO,MAAM,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;AACpE,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoFirebaseAnalytics from './ExpoFirebaseAnalytics';\nexport { default as FirebaseAnalyticsJS } from './FirebaseAnalyticsJS';\n\nif (!ExpoFirebaseAnalytics) {\n  console.warn(\n    \"No native ExpoFirebaseAnalytics module found, are you sure the expo-firebase-analytics's module is linked properly?\"\n  );\n}\n\n/**\n * Logs an app event. The event can have up to 25 parameters. Events with the same name must have\n * the same parameters. Up to 500 event names are supported. Using predefined events and/or\n * parameters is recommended for optimal reporting.\n *\n * The following event names are reserved and cannot be used:\n * - `ad_activeview`\n * - `ad_click`\n * - `ad_exposure`\n * - `ad_impression`\n * - `ad_query`\n * - `adunit_exposure`\n * - `app_clear_data`\n * - `app_remove`\n * - `app_update`\n * - `error`\n * - `first_open`\n * - `in_app_purchase`\n * - `notification_dismiss`\n * - `notification_foreground`\n * - `notification_open`\n * - `notification_receive`\n * - `os_update`\n * - `screen_view`\n * - `session_start`\n * - `user_engagement`\n *\n * @param name The name of the event. Should contain 1 to 40 alphanumeric characters or\n *     underscores. The name must start with an alphabetic character. Some event names are\n *     reserved. The \"firebase_\",\n *     \"google_\", and \"ga_\" prefixes are reserved and should not be used. Note that event names are\n *     case-sensitive and that logging two events whose names differ only in case will result in\n *     two distinct events.\n * @param parameters The dictionary of event parameters. Passing `undefined` indicates that the event has\n *     no parameters. Parameter names can be up to 40 characters long and must start with an\n *     alphabetic character and contain only alphanumeric characters and underscores. Only `String`\n *     and `Number` (signed 64-bit integer and 64-bit floating-point number) parameter types are\n *     supported. `String` parameter values can be up to 100 characters long. The \"firebase_\",\n *     \"google_\", and \"ga_\" prefixes are reserved and should not be used for parameter names.\n */\nexport async function logEvent(name: string, properties?: { [key: string]: any }): Promise<void> {\n  if (!ExpoFirebaseAnalytics.logEvent) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'logEvent');\n  }\n  return await ExpoFirebaseAnalytics.logEvent(name, properties);\n}\n\n/**\n * Sets whether analytics collection is enabled for this app on this device. This setting is\n * persisted across app sessions. By default it is enabled.\n *\n * @param isEnabled A flag that enables or disables Analytics collection.\n */\nexport async function setAnalyticsCollectionEnabled(isEnabled: boolean): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setAnalyticsCollectionEnabled');\n  }\n  return await ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled(isEnabled);\n}\n\n/**\n * Sets the current screen name, which specifies the current visual context in your app. This helps\n * identify the areas in your app where users spend their time and how they interact with your app.\n *\n * @param screenName The name of the current screen. Should contain 1 to 100 characters. Set to `undefined`\n *     to clear the current screen name.\n * @param screenClassOverride The name of the screen class. Should contain 1 to 100 characters. By\n *     default this is the class name of the current screen (UIViewController on iOS). Set to `undefined` to revert to the\n *     default class name.\n */\nexport async function setCurrentScreen(\n  screenName?: string,\n  screenClassOverride?: string\n): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setCurrentScreen) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setCurrentScreen');\n  }\n  return await ExpoFirebaseAnalytics.setCurrentScreen(screenName, screenClassOverride);\n}\n\n/**\n * Sets the interval of inactivity in seconds that terminates the current session. The default\n * value is 1800000 milliseconds (30 minutes).\n *\n * @param sessionTimeoutInterval The custom time of inactivity in milliseconds before the current\n *     session terminates.\n */\nexport async function setSessionTimeoutDuration(sessionTimeoutInterval: number): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setSessionTimeoutDuration) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setSessionTimeoutDuration');\n  }\n  return await ExpoFirebaseAnalytics.setSessionTimeoutDuration(sessionTimeoutInterval);\n}\n\n/**\n * Sets the user ID property. This feature must be used in accordance with\n * [Google's Privacy Policy](https://www.google.com/policies/privacy)\n *\n * @param userID The user ID to ascribe to the user of this app on this device, which must be\n *     non-empty and no more than 256 characters long. Setting userID to null removes the user ID.\n */\nexport async function setUserId(userId: string | null): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setUserId) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUserId');\n  }\n  return await ExpoFirebaseAnalytics.setUserId(userId);\n}\n\n/**\n * Sets a user property to a given value. Up to 25 user property names are supported. Once set,\n * user property values persist throughout the app life-cycle and across sessions.\n *\n * The following user property names are reserved and cannot be used:\n *\n * - `first_open_time`\n * - `last_deep_link_referrer`\n * - `user_id`\n *\n * @param name The name of the user property to set. Should contain 1 to 24 alphanumeric characters\n *     or underscores and must start with an alphabetic character. The \"firebase_\", \"google_\", and\n *     \"ga_\" prefixes are reserved and should not be used for user property names.\n * @param value The value of the user property. Values can be up to 36 characters long. Setting the\n *     value to null removes the user property.\n */\nexport async function setUserProperty(name: string, value: string): Promise<void> {\n  return await setUserProperties({ [name]: value });\n}\n\n/**\n * Clears all analytics data for this instance from the device and resets the app instance ID.\n */\nexport async function resetAnalyticsData(): Promise<void> {\n  if (!ExpoFirebaseAnalytics.resetAnalyticsData) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'resetAnalyticsData');\n  }\n  return await ExpoFirebaseAnalytics.resetAnalyticsData();\n}\n\n/**\n * Sets multiple user properties to the supplied values.\n *\n * @param properties key/value set of user properties\n */\nexport async function setUserProperties(properties: { [key: string]: string }): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setUserProperties) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUserProperties');\n  }\n  return await ExpoFirebaseAnalytics.setUserProperties(properties);\n}\n\n/**\n * Enables or disables the warning and log messages when using\n * Firebase Analytics on the Expo client.\n *\n * Firebase Analytics is not available on the Expo client and therefore\n * logs the requests to the console for development purposes. To test\n * Firebase Analytics, create a standalone build or custom client.\n * Use this function to suppress the warning and log messages.\n *\n * @param isEnabled A flag that enables or disables unavailability logging.\n */\nexport function setUnavailabilityLogging(isEnabled: boolean): void {\n  if (!ExpoFirebaseAnalytics.setUnavailabilityLogging) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUnavailabilityLogging');\n  }\n  ExpoFirebaseAnalytics.setUnavailabilityLogging(isEnabled);\n}\n\n/**\n * In Expo Go, sets the clientId to the given value for the current session.\n *\n * By default, the clientId is set to `Constants.installationId` in Expo Go,\n * which is deprecated and will be removed in SDK 44. At that time, this method\n * will need to be used to set the `clientId` when using Expo Go.\n *\n * @param clientId UUIDv4 string value to set for the current session in Expo Go\n */\nexport function setClientId(clientId: string): void {\n  if (!ExpoFirebaseAnalytics.setClientId) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setClientId');\n  }\n  ExpoFirebaseAnalytics.setClientId(clientId);\n}\n\n/**\n * Enables or disabled debug mode on the Expo client, so events can\n * be tracked using the [DebugView in the Analytics dashboard](https://firebase.google.com/docs/analytics/debugview#reporting).\n *\n * This option is only available on the standard Expo client.\n * When using a standalone build, the bare workflow or web, use the\n * [natively available options](https://firebase.google.com/docs/analytics/debugview).\n *\n * @param isEnabled A flag that enables or disables debug mode.\n */\nexport async function setDebugModeEnabled(isEnabled: boolean): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setDebugModeEnabled) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setDebugModeEnabled');\n  }\n  return await ExpoFirebaseAnalytics.setDebugModeEnabled(isEnabled);\n}\n"]}