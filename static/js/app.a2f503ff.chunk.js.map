{"version":3,"sources":["src/components/buttons/ImageUploadButton.jsx","src/constants/index.js","src/components/buttons/MorphButton.jsx","src/components/views/UploadImagesView.jsx","src/components/views/MorphResponseView.jsx","App.js"],"names":["ImageUploadButton","imageRef","setImageRef","useState","isLoading","setIsLoading","isSuccess","setIsSuccess","isFailure","setIsFailure","pickImage","a","async","Analytics","name","screen","purpose","ImagePicker","mediaTypes","Images","allowsEditing","aspect","quality","base64","result","cancelled","Error","uploadImage","uri","img","data","FormData","append","fetch","method","headers","Authorization","body","then","res","ok","json","resJson","catch","errorResponse","errorMessage","console","log","errorObject","Button","icon","disabled","loading","labelStyle","styles","btnSize","color","onPress","View","Text","style","message","StyleSheet","create","fontSize","loadingIcon","marginTop","MorphButton","firstImageRef","secondImageRef","setMorphResponse","morphResponse","mode","err","error","getMorph","UploadImagesView","setFirstImageRef","setSecondImageRef","container","uploadImgArea","divider","morphBtnArea","morphBtn","alignItems","height","margin","width","MorphResponseView","button","WebBrowser","toString","marginBottom","theme","DefaultTheme","roundness","colors","primary","accent","App","view","background","flex"],"mappings":"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","file":"static/js/app.a2f503ff.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport * as ImagePicker from 'expo-image-picker'\nimport * as Analytics from 'expo-firebase-analytics'\nimport { Button, Text} from 'react-native-paper'\n\nimport { morph_upload_endpoint } from '../../constants/index'\n\nexport function ImageUploadButton ({\n  imageRef,\n  setImageRef\n}) {\n  \n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [isFailure, setIsFailure] = useState(false)\n\n  const pickImage = async () => {\n    await Analytics.logEvent('ButtonTapped', {\n      name: 'PickImage',\n      screen: 'main',\n      purpose: 'Image upload button'\n    })\n\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [4, 3],\n      // Quality of compression: [0, 1]\n      quality: 0.1,\n      base64: true\n    })\n\n    if (!result.cancelled) {\n      if (imageRef === null || (imageRef instanceof Error)) {\n        // image picker on iphone works different than web browser\n        if (result.base64) {\n          uploadImage(result.base64)\n        } \n        else {\n          uploadImage(result.uri)\n        }\n      }\n    }\n  }\n\n  const uploadImage = async (img) => {\n    const data = new FormData()\n    data.append('firstImageRef', img)\n\n    setIsLoading(true)\n    setIsSuccess(false)\n    setIsFailure(false)\n\n    fetch(\n      morph_upload_endpoint, {\n        method: 'POST',\n        headers: {\n          Authorization: 'ImageMorpherV1'\n        },\n        body: data\n      }\n    )\n      .then(res => {\n        if (!res.ok) {\n          throw res\n        }\n\n        return res.json()\n      })\n      .then(resJson => {\n        Analytics.logEvent('ButtonTapped', {\n          name: 'UploadSuccess',\n          screen: 'main',\n          purpose: 'Image upload was successful'\n        })\n        // On success, hide the loading spinner\n        setIsLoading(false)\n        setIsSuccess(true)\n        setIsFailure(false)\n        setImageRef(resJson)\n        return resJson.data\n      })\n      .catch((errorResponse) => {\n        errorResponse.json().then(errorMessage => {\n          Analytics.logEvent('ButtonTapped', {\n            name: 'UploadFailure',\n            screen: 'main',\n            purpose: 'Image upload failed'\n          })\n          console.log(errorMessage)\n          setIsLoading(false)\n          setIsSuccess(false)\n          setIsFailure(true)\n          const errorObject = new Error(errorMessage)\n          setImageRef(errorObject)\n        })\n      })\n  }\n\n  if (isLoading) {\n    return (\n      <Button\n        icon=\"face-recognition\"\n        disabled\n        loading\n      >\n        Loading..\n      </Button>\n    )\n  }\n\n  if (isSuccess && imageRef) {\n    return (\n      <Button \n        icon=\"face-recognition\"\n        labelStyle={styles.btnSize}\n        color=\"lightgreen\"\n        onPress={pickImage}\n      >\n      </Button>\n    )\n  }\n  if (isFailure) {\n    return (\n      <View>\n        <Button icon=\"face-recognition\" labelStyle={styles.btnSize} color=\"red\" onPress={pickImage}></Button>\n        {imageRef && <Text style={styles.errorMessage}>{imageRef.message}</Text>}\n      </View>\n    )\n  }\n\n  return (\n    <Button icon=\"face-recognition\" labelStyle={styles.btnSize} color=\"#e5a823\" onPress={pickImage}></Button>\n  )\n}\n\nconst styles = StyleSheet.create({\n  btnSize: {\n    fontSize: 70,\n  },\n  loadingIcon: {\n    marginTop: 20,\n  },\n  errorMessage: {\n    marginTop: 10,\n  }\n})\n","// Dev endpoints\n// export const morph_endpoint = 'http://sammyjaved.com:8088/morph'\n// export const morph_upload_endpoint = 'http://sammyjaved.com:8088/morph/upload';\n\n// Prod endpoints\nexport const morph_endpoint = 'https://sammyjaved.com/morph'\nexport const morph_upload_endpoint = 'https://sammyjaved.com/morph/upload';\n","import React, { useState } from 'react'\nimport { Button } from 'react-native-paper'\nimport * as Analytics from 'expo-firebase-analytics'\nimport { View } from 'react-native-web'\nimport { Text } from 'react-native-paper'\n\nimport { morph_endpoint } from '../../constants/index'\n\nexport function MorphButton({\n  firstImageRef,\n  secondImageRef,\n  morphResponse,\n  setMorphResponse\n}) {\n\n\n  // for testing\n  // firstImageRef = \"2022-04-10-17-31-29-969295-d98ca6dccb2f4113861168ee0e6e0c42.jpg\";\n  // secondImageRef = \"2022-04-10-17-31-47-544901-b38412bf90f942d0a31035bca93080e5.jpg\";\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [isFailure, setIsFailure] = useState(false)\n\n  async function getMorph (firstImageRef, secondImageRef) {\n    if (!firstImageRef || !secondImageRef) {\n      return\n    }\n   \n    try {\n      await Analytics.logEvent('ButtonTapped', {\n        name: ('StartMorph'),\n        screen: 'main',\n        purpose: ('Start the morph'),\n      })\n\n      const data = new FormData()\n      data.append('firstImageRef', firstImageRef)\n      data.append('secondImageRef', secondImageRef)\n      data.append('isSequence', ('True'))\n      data.append('stepSize', '20')\n      // Correct\n      setIsLoading(true)\n      setIsSuccess(false)\n      setIsFailure(false)\n      setMorphResponse(null)\n\n      const response = await\n      fetch(\n        morph_endpoint, {\n          method: 'POST',\n          headers: {\n            Authorization: 'ImageMorpherV1'\n          },\n          body: data\n        }\n      )\n        .then(res => {\n          try {\n            if (res.ok) {\n              return res.json()\n            } else {\n              throw new Error(res)\n            }\n          } catch (err) {\n            console.log(err.message)\n            setIsLoading(false)\n            setIsSuccess(false)\n            setIsFailure(true)\n            setMorphResponse(null)\n            throw err\n          }\n        })\n        .then(resJson => {\n          // On success, hide the loading spinner\n          setIsLoading(false)\n          setIsSuccess(true)\n          setIsFailure(false)\n          setMorphResponse(resJson)\n\n          Analytics.logEvent('ButtonTapped', {\n            name: ('MorphSequenceSuccess'),\n            screen: 'main',\n            purpose: 'Morph was successful'\n          })\n\n          return resJson.data\n        })\n        .catch((error) => {\n          console.error(error)\n          Analytics.logEvent('ButtonTapped', {\n            name: ('MorphSequenceFailure'),\n            screen: 'main',\n            purpose: error.message\n          })\n        })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const getMorphButton = () => {\n    if (isLoading) {\n      return (\n        <Button\n          mode='outlined'\n          disabled\n          loading\n        >\n          Loading..\n        </Button>\n      )\n    }\n\n    if (isFailure) {\n      return (\n        <Button\n          mode='outlined'\n          disabled\n        >\n          Morph Failed\n        </Button>\n      )\n    }\n\n    if (!firstImageRef && !secondImageRef) {\n      return (\n        <Button\n          mode='outlined'\n          disabled\n        >\n          Upload two images to morph\n        </Button>\n      )\n    }\n    \n    if (firstImageRef instanceof Error) {\n      return (\n        <Button\n          mode='outlined'\n          disabled\n        >\n          Re-upload first image\n        </Button>\n      )\n    }\n    if (secondImageRef instanceof Error) {\n      return (\n        <Button\n          mode='outlined'\n          disabled\n        >\n          Re-upload second image\n        </Button>\n      )\n\n    }\n\n    if (!firstImageRef && secondImageRef) {\n      return (\n        <Button\n          mode='outlined'\n          disabled\n        >\n          Upload the first image\n        </Button>\n      )\n    }\n\n    if (firstImageRef && !secondImageRef) {\n      return (\n        <Button\n          mode='outlined'\n          disabled\n        >\n          Upload the second image\n        </Button>\n      )\n    }\n\n    if (firstImageRef && secondImageRef) {\n      return (\n        <Button\n          mode='outlined'\n          onPress={() => getMorph(firstImageRef, secondImageRef)}\n        >\n          Morph\n        </Button>\n      )\n    }\n  }\n\n  const morphButton = getMorphButton();\n\n  return (\n    morphButton\n  )\n}\n","import React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { ImageUploadButton } from '../buttons/ImageUploadButton'\nimport { MorphButton } from '../buttons/MorphButton'\n\nexport function UploadImagesView ({firstImageRef, setFirstImageRef, secondImageRef, setSecondImageRef, morphResponse, setMorphResponse}) {\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.uploadImgArea}>\n        <ImageUploadButton\n          imageRef={firstImageRef}\n          setImageRef={setFirstImageRef}\n        />\n        <View style={styles.divider}></View>\n        <ImageUploadButton\n          imageRef={secondImageRef}\n          setImageRef={setSecondImageRef}\n        />\n      </View>\n      <View style={styles.morphBtnArea}>\n        <View style={styles.morphBtn}>\n          <MorphButton\n            style={styles.morphBtn}\n            firstImageRef={firstImageRef}\n            secondImageRef={secondImageRef}\n            morphResponse={morphResponse}\n      \n            setFirstImageRef={setFirstImageRef}\n            setSecondImageRef={setSecondImageRef}\n            setMorphResponse={setMorphResponse} \n          />\n        </View>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n  },\n  divider: {\n    height: 100,\n  },\n  // uploadImgArea: {\n  //   flexDirection: 'row',\n  // },\n  morphBtnArea: {\n    margin: 100,\n  },\n  morphBtn: {\n    width: 300,\n  },\n})\n","import React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Button } from 'react-native-paper'\nimport * as WebBrowser from 'expo-web-browser'\nimport * as Analytics from 'expo-firebase-analytics'\n\nexport function MorphResponseView({\n  setFirstImageRef,\n  setSecondImageRef,\n  setMorphResponse,\n  firstImageRef,\n  secondImageRef,\n  morphResponse,\n}) {\n  \n  function setInitialMorphState () {\n    setFirstImageRef(null)\n    setSecondImageRef(null)\n    setMorphResponse(null)\n  }\n\n  function getMorphResponse() {\n    Analytics.logEvent('ButtonTapped', {\n        name: ('GetMorphSequence'),\n        screen: 'main',\n        purpose: 'Begin the morph'\n      })\n      WebBrowser.openBrowserAsync(morphResponse.toString())\n  }\n\n  return (\n    <View style={styles.morphBtnArea}>\n      <View style={styles.button}>\n        <Button mode=\"outlined\" onPress={() => getMorphResponse()}>\n          View Morph\n        </Button>\n      </View>\n      <View style={styles.button}>\n        <Button mode=\"outlined\" onPress={() => setInitialMorphState()}>\n          Restart\n        </Button>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({ \n  morphBtnArea: {\n    alignItems: 'center',\n  },  \n  button: {\n    marginTop: 40,\n    marginBottom: 40,\n    width: 200,\n  }\n})\n","import React, { useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { LinearGradient } from 'expo-linear-gradient'\n\n// Views\nimport { UploadImagesView }from './src/components/views/UploadImagesView'\nimport { MorphResponseView } from './src/components/views/MorphResponseView'\n\n// UI library\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper'\n\nconst theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  mode: 'adaptive',\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#3498db',\n    accent: '#f1c40f',\n  },\n};\n\nexport default function App () {\n\n  const [firstImageRef, setFirstImageRef] = useState(null)\n  const [secondImageRef, setSecondImageRef] = useState(null)\n  const [morphResponse, setMorphResponse] = useState(null)\n\n  const getView = () => {\n    // View after successful morph\n    if (morphResponse) {\n      return (\n          <MorphResponseView\n          firstImageRef={firstImageRef}\n          secondImageRef={secondImageRef}\n          morphResponse={morphResponse}\n\n          setFirstImageRef={setFirstImageRef}\n          setSecondImageRef={setSecondImageRef}\n          setMorphResponse={setMorphResponse}\n        />\n      )\n    }\n    // Homepage view\n    return (\n      <UploadImagesView\n        firstImageRef={firstImageRef}\n        secondImageRef={secondImageRef}\n        morphResponse={morphResponse}\n\n        setFirstImageRef={setFirstImageRef}\n        setSecondImageRef={setSecondImageRef}\n        setMorphResponse={setMorphResponse}\n      />\n    )\n  }\n\n  return (\n    <PaperProvider theme={theme}>\n      {/* <LinearGradient\n        colors={['#000428', '#004e92']}\n        style={styles.background}\n      > */}\n        <View style={styles.view}>\n          {getView()}\n        </View>\n      {/* </LinearGradient> */}\n    </PaperProvider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n  },\n  view: {\n    marginTop: '30%',\n  },\n})\n"],"sourceRoot":""}